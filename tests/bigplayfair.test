# bigplayfair.test
# Test of the 6x6 playfair cipher type

package require cipher

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}

# Sample bigplayfair cipher:
#
# dl hf sn cn cr zx cq qg fe eq on
#
#
# Key:
#	logar
#	ithmb
#	cdefk
#	npqsu
#	vwxyz
#
#
# co me qu ic kl yw en ex ed he lp

proc createValidCipher {{period 0}} {
    if {$period == 0} {
	set c [cipher create bigplayfair -ct "pl 8p rm 2x 15 c9 ry 7a em wf 54 ns 9i yr lf et yd l6 n7 pv dw x0 v8 3i 1r 6a sd 4v e5 fd 3o xf gl w4 d2 3d xh em vi mv v8 re 54 pl 8p f8 z6 uy 2x 1d kx re hk ds fd nh 2u 6x fr kx yr 43 x0 pl 4y t4 x0 9i ib gh"]
    } else {
	set c [cipher create bigplayfair -ct "pl 8p rm 2x 15 c9 ry 7a em wf 54 ns 9i yr lf et yd l6 n7 pv dw x0 v8 3i 1r 6a sd 4v e5 fd 3o xf gl w4 d2 3d xh em vi mv v8 re 54 pl 8p f8 z6 uy 2x 1d kx re hj ds fd nh 2u 6x fr kx yr 43 x0 pl 4y t4 x0 9i ib gh" -period $period]
    }

    return $c
}

# Test groups:
#	1.x	Invalid type and number of arguments to cipher command
#	2.x	Invalid range of arguments to cipher command
#       3.x     Valid trivial cipher command usage
#       4.x     Substitution tests
#       5.x     Restore tests
#       6.x     Row swap tests
#       7.x     Encode tests

test bigplayfair-1.1 {invalid use of options} {
    set c [createValidCipher]
    set result [catch {$c} msg]
    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar ?option?}}

test bigplayfair-1.2 {use of invalid option} {
    set c [createValidCipher]
    set result [list [catch {$c configure -foo 5} msg] $msg]
    rename $c {}
    
    set result
} {1 {Unknown option -foo}}

test bigplayfair-1.3 {invalid use of cget} {
    set c [createValidCipher]

    set result [catch {$c cget} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar cget option}}

test bigplayfair-1.4 {invalid use of cget} {
    set c [createValidCipher]

    set result [catch {$c cget foo} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Unknown option foo}}

test bigplayfair-1.5 {invalid use of configure} {
    set c [createValidCipher]

    set result [catch {$c configure} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar configure ?option value?}}

test bigplayfair-1.6 {invalid use of configure -stepinterval} {
    set c [createValidCipher]

    set result [catch {$c configure -stepinterval a} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid interval.}}

test bigplayfair-1.7 {invalid use of configure -stepinterval} {
    set c [createValidCipher]

    set result [catch {$c configure -stepinterval -1} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid interval.}}

test bigplayfair-1.8 {non-numeric period} {
    set c [createValidCipher]

    set result [catch {$c configure -period a} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Bad period.  Integer expected:  a}}

test bigplayfair-1.9 {negative period} {
    set c [createValidCipher]

    set result [catch {$c configure -period -1} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Period must be greater than zero.}}

test bigplayfair-1.10 {bad use of swap} {
    set c [createValidCipher]

    set result [catch {$c swap} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar swap row|col item1 item2}}

test bigplayfair-1.11 {bad swap arguments} {
    set c [createValidCipher]

    set result [catch {$c swap col a 1} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid row/column value a.}}

test bigplayfair-1.12 {bad swap arguments} {
    set c [createValidCipher]

    set result [catch {$c swap col 1 a} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid row/column value a.}}

test bigplayfair-1.13 {attempt to locate tip} {
    set c [createValidCipher]

    set result [catch {$c locate} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {No locate tip function defined for bigplayfair ciphers.}}

test bigplayfair-1.14 {attempt to solve} {
    set c [createValidCipher]

    set result [catch {$c solve} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Solving bigplayfair ciphers is not yet implemented.}}

test bigplayfair-1.15 {bad use of substitute command} {
    set c [createValidCipher]

    set result [catch {$c substitute} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar substitute row col val}}

test bigplayfair-1.16 {bad use of undo command} {
    set c [createValidCipher]

    set result [catch {$c undo foo} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar undo row col}}

test bigplayfair-1.17 {bad use of restore command} {
    set c [createValidCipher]

    set result [catch {$c restore} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar restore key ?junk?}}

test bigplayfair-1.18 {invalid use phillips command} {
    set c [createValidCipher]

    set result [catch {$c foo} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Unknown option foo
Must be one of:  ciphervar cget ?option?
                 ciphervar configure ?option value?
                 ciphervar restore key
                 ciphervar substitute row col val
                 ciphervar swap row1 row2
                 ciphervar undo row col
                 ciphervar encode pt key}}

test bigplayfair-2.1 {get plaintext with no ciphertext} {
    set c [cipher create bigplayfair]

    set result [catch {$c cget -pt} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can't do anything until ciphertext has been set}}

test bigplayfair-2.2 {set bad ciphertext} {
    set result [catch {cipher create bigplayfair -ct ----} msg]

    lappend result $msg
    
    set result
} {1 {No valid characters found in ciphertext}}

test bigplayfair-2.3 {set bad ciphertext} {
    set cipher [cipher create bigplayfair -ct aa]
    set result [catch {$cipher cget -pt} msg]

    lappend result $msg
    rename $cipher {}
    
    set result
} {1 {Invalid double letters found in ciphertext}}

test bigplayfair-2.4 {set bad ciphertext} {
    set result [catch {cipher create bigplayfair -ct abcde} msg]

    lappend result $msg
    
    set result
} {1 {bigplayfair ciphers must contain an even number of characters}}

test bigplayfair-2.5 {bad swap columns} {
    set c [createValidCipher]

    set result [catch {$c swap col 0 1} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid column in bigplayfair swap}}

test bigplayfair-2.6 {bad swap columns} {
    set c [createValidCipher]

    set result [catch {$c swap col 7 1} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid column in bigplayfair swap}}

test bigplayfair-2.7 {bad swap row} {
    set c [createValidCipher]

    set result [catch {$c swap row 1 0} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid row in bigplayfair swap}}

test bigplayfair-2.8 {bad swap row} {
    set c [createValidCipher]

    set result [catch {$c swap row 1 7} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid row in bigplayfair swap}}

test bigplayfair-2.9 {bad swap type} {
    set c [createValidCipher]

    set result [catch {$c swap foo 1 2} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid parameter.  Must be 'row' or 'col'}}

test bigplayfair-2.10 {restore with no ciphertext} {
    set c [cipher create bigplayfair]

    set result [catch {$c restore abc} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can't do anything until ciphertext has been set}}

test bigplayfair-2.11 {restore with invalid key length} {
    set c [createValidCipher]

    set result [catch {$c restore abc} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid key length 3}}

test bigplayfair-2.12 {restore with invalid characters in key} {
    set c [createValidCipher]

    set result [catch {$c restore -23456-23456-23456-23456-23456-23456} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid character in key}}

test bigplayfair-2.13 {restore with invalid key (duplicate chars)} {
    set c [createValidCipher]

    set result [catch {$c restore aaaaaabbbbbbccccccddddddeeeeeeffffff} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Duplicate character in key: a}}

test bigplayfair-2.14 {substitute with invalid characters} {
    set c [createValidCipher]

    set result [catch {$c sub 0 1 a} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid row specification}}

test bigplayfair-2.15 {substitute with invalid characters} {
    set c [createValidCipher]

    set result [catch {$c sub 1 0 a} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid column specification}}

test bigplayfair-2.16 {substitute with invalid characters} {
    set c [createValidCipher]

    set result [catch {$c sub 1 1 #} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid key value}}

test bigplayfair-2.17 {encode with non-listified key} {
    set c [cipher create bigplayfair]

    set result [catch {$c encode foobar "abc \{bc"} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {unmatched open brace in list}}

test bigplayfair-2.18 {encode with too many key elements} {
    set c [cipher create bigplayfair]

    set result [catch {$c encode foobar "a b"} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid number of items in encoding key 'a b'.  Should have found 1.}}

test bigplayfair-2.19 {encode with short key} {
    set c [cipher create bigplayfair]

    set result [catch {$c encode foobar "abc"} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid length of key.}}

test bigplayfair-3.1 {successful use of cget -length} {
    set c [createValidCipher]
    set result [$c cget -length]
    rename $c {}
    
    set result
} {140}

test bigplayfair-3.2 {get period (not set)} {
    set c [createValidCipher]
    set result [$c cget -period]
    rename $c {}
    
    set result
} {0}

test bigplayfair-3.3 {get period (set)} {
    set c [createValidCipher 5]
    set result [$c cget -period]
    rename $c {}
    
    set result
} {5}

test bigplayfair-3.4 {successful use of cget -ct (empty)} {
    set c [cipher create bigplayfair]
    set result [$c cget -ct]
    rename $c {}
    
    set result
} {{}}

test bigplayfair-3.5 {successful use of cget -ct} {
    set c [createValidCipher]
    set result [$c cget -ct]
    rename $c {}
    
    set result
} {pl8prm2x15c9ry7aemwf54ns9iyrlfetydl6n7pvdwx0v83i1r6asd4ve5fd3oxfglw4d23dxhemvimvv8re54pl8pf8z6uy2x1dkxrehkdsfdnh2u6xfrkxyr43x0pl4yt4x09iibgh}

test bigplayfair-3.6 {set ciphertext with uppercase letters} {
    set c [cipher create bigplayfair -ct "Abcde Fghij Klmno Pqrst"]
    set result [$c cget -ct]
    rename $c {}
    
    set result
} {abcdefghijklmnopqrst}

test bigplayfair-3.7 {successful use of cget -ct with period set} {
    set c [createValidCipher 5]
    set result [$c cget -ct]
    rename $c {}
    
    set result
} {pl8prm2x15c9ry7aemwf54ns9iyrlfetydl6n7pvdwx0v83i1r6asd4ve5fd3oxfglw4d23dxhemvimvv8re54pl8pf8z6uy2x1dkxrehjdsfdnh2u6xfrkxyr43x0pl4yt4x09iibgh}

test bigplayfair-3.8 {successful use of cget -type} {
    set c [createValidCipher]
    set result [$c cget -type]
    rename $c {}
    
    set result
} {bigplayfair}

test bigplayfair-3.9 {successful use of configure -ct} {
    set c [createValidCipher]
    set result [$c configure -ct "abcdef"]
    rename $c {}
    
    set result
} {abcdef}

test bigplayfair-3.10 {successful use of undo} {
    set c [createValidCipher]
    $c substitute 1 1 a
    $c undo
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {{                                    } {                                                                                                                                            }}

test bigplayfair-3.11 {get default stepinterval} {
    set c [createValidCipher]

    set result [$c cget -stepinterval]
    rename $c {}
    
    set result
} {0}

test bigplayfair-3.12 {set/get stepinterval (set to 0)} {
    set c [createValidCipher]

    $c configure -stepinterval 0
    set result [$c cget -stepinterval]
    rename $c {}
    
    set result
} {0}

test bigplayfair-3.13 {set/get stepinterval} {
    set c [createValidCipher]

    $c configure -stepinterval 10000
    set result [$c cget -stepinterval]
    rename $c {}
    
    set result
} {10000}

test bigplayfair-3.14 {get default stepcommand} {
    set c [createValidCipher]

    set result [$c cget -stepcommand]
    rename $c {}
    
    set result
} {}

test bigplayfair-3.15 {set/get stepcommand (set to null)} {
    set c [createValidCipher]

    $c configure -stepcommand {}
    set result [$c cget -stepcommand]
    rename $c {}
    
    set result
} {}

test bigplayfair-3.16 {set/get stepcommand} {
    set c [createValidCipher]

    $c configure -stepcommand puts
    set result [$c cget -stepcommand]
    rename $c {}
    
    set result
} {puts}

test bigplayfair-3.17 {get default bestfitcommand} {
    set c [createValidCipher]

    set result [$c cget -bestfitcommand]
    rename $c {}
    
    set result
} {}

test bigplayfair-3.18 {set/get bestfitcommand (set to null)} {
    set c [createValidCipher]

    $c configure -bestfitcommand {}
    set result [$c cget -bestfitcommand]
    rename $c {}
    
    set result
} {}

test bigplayfair-3.19 {set/get bestfitcommand} {
    set c [createValidCipher]

    $c configure -bestfitcommand puts
    set result [$c cget -bestfitcommand]
    rename $c {}
    
    set result
} {puts}

test bigplayfair-3.20 {get default language} {
    set c [createValidCipher]

    set result [$c cget -language]
    rename $c {}
    
    set result
} {english}

test bigplayfair-3.21 {set/get language} {monolingual} {
    set c [createValidCipher]

    $c configure -language german
    set result [$c cget -language]
    rename $c {}
    
    set result
} {german}

test bigplayfair-3.22 {set ct returns ciphertext} {
    set c [cipher create bigplayfair]
    set result [$c configure -ct abcdefgh]
    rename $c {}

    set result
} {abcdefgh}

test bigplayfair-4.1 {single substitution} {
    set c [createValidCipher]
    $c substitute 1 1 a
    set result [list [$c cget -key]]
    rename $c {}
    
    set result
} {{a                                   }}

test bigplayfair-4.2 {multiple substitutions} {
    set c [createValidCipher]
    $c substitute 3 5 k
    $c substitute 1 1 l
    $c substitute 1 5 r
    $c substitute 3 1 c
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {{l   r       c   k                   } {                                                                                                                                            }}

test bigplayfair-5.1 {restore} {
    set c [createValidCipher]
    $c restore a1b2c3d4e5f6g7h8i9j0klmnopqrstuvwxyz
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {a1b2c3d4e5f6g7h8i9j0klmnopqrstuvwxyz r07rslxr243isxg1fkyeedmti8xsm56qufn5090peuvlx7c92pd3of1p4e56aty58jve5aa6w8fky70yx7q5edr07r5it3zxxra4lwq5ehfo56k9ax5z5slwxs61vlr0fvp6vli8hc97}

test bigplayfair-5.2 {restore with period set} {
    set c [createValidCipher 5]
    $c restore a1b2c3d4e5f6g7h8i9j0klmnopqrstuvwxyz
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {a1b2c3d4e5f6g7h8i9j0klmnopqrstuvwxyz s850l0xrv22hsxi36lv4fflri8vtm64nv40f9iox5zy7xgb8vp4br6dzdf562qv58nu56ac4yi4nu8kwp7l541r8hrc5y4osxw3a0uq4gn5r5elixw5zeljzvq51wmo06xsfwji97277}

test bigplayfair-5.3 {restore with period set and incomplete final block} {
    set c [cipher create bigplayfair -ct "pl 8p rm 2x 15 c9 ry 7a em wf 54 ns 9i yr lf et yd l6 n7 pv dw x0 v8 3i 1r 6a sd 4v e5 fd 3o xf gl w4 d2 3d xh em vi mv v8 re 54 pl 8p f8 z6 uy 2x 1d kx re hj ds fd nh 2u 6x fr kx yr 43 x0 pl 4y t4 x0 9i ib" -period 5]
    $c restore a1b2c3d4e5f6g7h8i9j0klmnopqrstuvwxyz
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {a1b2c3d4e5f6g7h8i9j0klmnopqrstuvwxyz s850l0xrv22hsxi36lv4fflri8vtm64nv40f9iox5zy7xgb8vp4br6dzdf562qv58nu56ac4yi4nu8kwp7l541r8hrc5y4osxw3a0uq4gn5r5elixw5zeljzvq51wmo06xnfyk6781}

test bigplayfair-5.4 {restore with spaces in key} {
    set c [createValidCipher]
    $c restore {a b c d e f g h i j klmnopqrstuvwxyz}
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {{a b c d e f g h i j klmnopqrstuvwxyz} {r   sl      sx  fkye  mt  xsm  quf     peu          of        y  j      w fky  y  q   r       zx    lwq ehfo  k      slwxs    r         hc  }}

test bigplayfair-6.1 {swap columns} {
    set c [createValidCipher]
    $c restore a1b2c3d4e5f6g7h8i9j0klmnopqrstuvwxyz
    $c swap col 1 2
    set result [$c cget -key]
    rename $c {}
    
    set result
} {1ab2c34de5f67gh8i90jklmnpoqrstvuwxyz}

test bigplayfair-6.2 {swap rows} {
    set c [createValidCipher]
    $c restore a1b2c3d4e5f6g7h8i9j0klmnopqrstuvwxyz
    $c swap row 1 2
    set result [$c cget -key]
    rename $c {}
    
    set result
} {d4e5f6a1b2c3g7h8i9j0klmnopqrstuvwxyz}

test bigplayfair-7.1 {encode} {
    set c [cipher create bigplayfair]

    set result [list [$c encode "r07rslxr243isxg1fkyeedmti8xsm56qufn5090peuvlx7c92pd3of1p4e56aty58jve5aa6w8fky70yx7q5edr07r5it3zxxra4lwq5ehfo56k9ax5z5slwxs61vlr0fvp6vli8hc97" a1b2c3d4e5f6g7h8i9j0klmnopqrstuvwxyz]]
    lappend result [$c cget -ct] [$c cget -pt] [$c cget -key]
    rename $c {}

    set result
} {pl8prm2x15c9ry7aemwf54ns9iyrlfetydl6n7pvdwx0v83i1r6asd4ve5fd3oxfglw4d23dxhemvimvv8re54pl8pf8z6uy2x1dkxrehkdsfdnh2u6xfrkxyr43x0pl4yt4x09iibgh pl8prm2x15c9ry7aemwf54ns9iyrlfetydl6n7pvdwx0v83i1r6asd4ve5fd3oxfglw4d23dxhemvimvv8re54pl8pf8z6uy2x1dkxrehkdsfdnh2u6xfrkxyr43x0pl4yt4x09iibgh r07rslxr243isxg1fkyeedmti8xsm56qufn5090peuvlx7c92pd3of1p4e56aty58jve5aa6w8fky70yx7q5edr07r5it3zxxra4lwq5ehfo56k9ax5z5slwxs61vlr0fvp6vli8hc97 a1b2c3d4e5f6g7h8i9j0klmnopqrstuvwxyz}

test bigplayfair-7.2 {encode} {
    set c [cipher create bigplayfair]
    $c configure -period 5

    set result [list [$c encode "s850l0xrv22hsxi36lv4fflri8vtm64nv40f9iox5zy7xgb8vp4br6dzdf562qv58nu56ac4yi4nu8kwp7l541r8hrc5y4osxw3a0uq4gn5r5elixw5zeljzvq51wmo06xsfwji97277" a1b2c3d4e5f6g7h8i9j0klmnopqrstuvwxyz]]
    lappend result [$c cget -ct] [$c cget -pt] [$c cget -key]
    rename $c {}

    set result
} {pl8prm2x15c9ry7aemwf54ns9iyrlfetydl6n7pvdwx0v83i1r6asd4ve5fd3oxfglw4d23dxhemvimvv8re54pl8pf8z6uy2x1dkxrehjdsfdnh2u6xfrkxyr43x0pl4yt4x09iibgh pl8prm2x15c9ry7aemwf54ns9iyrlfetydl6n7pvdwx0v83i1r6asd4ve5fd3oxfglw4d23dxhemvimvv8re54pl8pf8z6uy2x1dkxrehjdsfdnh2u6xfrkxyr43x0pl4yt4x09iibgh s850l0xrv22hsxi36lv4fflri8vtm64nv40f9iox5zy7xgb8vp4br6dzdf562qv58nu56ac4yi4nu8kwp7l541r8hrc5y4osxw3a0uq4gn5r5elixw5zeljzvq51wmo06xsfwji97277 a1b2c3d4e5f6g7h8i9j0klmnopqrstuvwxyz}
