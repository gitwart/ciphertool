# twosquare.test
# Test of the twosquare cipher type

package require cipher

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}

# Helper routine for testing the twosquare cipher
# Laid out, the cipher looks like:
#
# ir rt eh mk gi me qg ru nm mz sv
#
# Solution:
#
# anotherdigraphicsetupx
#
# Key:  dialoguebcfhkmnpqrstvwxyz biographycdefklmnqstuvwxz


proc createValidCipher {} {
    set c [cipher create twosquare -ct "ir rt eh mk gi me qg ru nm mz sv"]

    return $c
}

# Test groups:
#	1.x	Invalid type and number of arguments to cipher command
#	2.x	Invalid range of arguments to cipher command
#       3.x     Valid trivial cipher command usage
#	7.x	Save/Restore tests
#	8.x	Encode tests

test twosquare-1.1 {invalid use of options} {
    set c [createValidCipher]
    set result [catch {$c} msg]
    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar ?option?}}

test twosquare-1.2 {use of invalid option} {
    set c [createValidCipher]
    set result [list [catch {$c configure -foobar 5} msg] $msg]
    rename $c {}
    
    set result
} {1 {Unknown option -foobar}}

test twosquare-1.3 {invalid use of cget} {
    set c [createValidCipher]

    set result [catch {$c cget} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar cget option}}

test twosquare-1.4 {invalid use of cget} {
    set c [createValidCipher]

    set result [catch {$c cget foo} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Unknown option foo}}

test twosquare-1.5 {invalid use of configure} {
    set c [createValidCipher]

    set result [catch {$c configure} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar configure ?option value?}}

test twosquare-1.6 {invalid configure option} {
    set c [createValidCipher]

    set result [catch {$c configure -foo bar} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Unknown option -foo}}

test twosquare-1.7 {invalid use of restore} {
    set c [createValidCipher]

    set result [catch {$c restore} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar restore square1 square2}}

test twosquare-1.8 {invalid use of substitute} {
    set c [createValidCipher]

    set result [catch {$c substitute foo} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {No substitute function defined for twosquare ciphers}}

test twosquare-1.9 {invalid use of undo} {
    set c [createValidCipher]

    set result [catch {$c undo} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar undo ct}}

test twosquare-1.10 {invalid use of locate} {
    set c [createValidCipher]

    set result [catch {$c locate} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar locate pt ct}}

test twosquare-1.12 {invalid use twosquare command} {
    set c [createValidCipher]

    set result [catch {$c foo} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Unknown option foo
Must be one of:  ciphervar cget ?option?
                 ciphervar configure ?option value?
                 ciphervar solve
                 ciphervar substitute row col pt
                 ciphervar undo ct
                 ciphervar restore pt positions
                 ciphervar locate pt ct
                 ciphervar encode pt key}}

test twosquare-2.1 {invalid cipher characters} {
    set c [cipher create twosquare]

    set result [catch {$c configure -ct 1111} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {No valid characters found in ciphertext}}

test twosquare-2.2 {invalid length of first restore key alphabet} {
    set c [createValidCipher]

    set result [catch {$c restore aabc aabc} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Key 'aabc' has invalid length 4}}

test twosquare-2.3 {invalid length of second restore key alphabet} {
    set c [createValidCipher]

    set result [catch {$c restore abcdefghiklmnopqrstuvwxyz bbcd} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Key 'bbcd' has invalid length 4}}


test twosquare-2.4 {invalid character in restore key} {
    set c [createValidCipher]

    set result [catch {$c restore 1bcdefghiklmnopqrstuvwxyz [string repeat a 25]} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid character found in key}}

test twosquare-2.5 {duplicate character in restore key} {unimplemented} {
    set c [createValidCipher]

    set result [catch {$c restore abcdefghiklmnopqrstuvwxya} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Duplicate letter/position in key}}

test twosquare-2.6 {Attempt to locate tip with no ciphertext} {unimplemented} {
    set c [cipher create twosquare]

    set result [catch {$c locate ttt zzz} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can't do anything until the ciphertext has been set}}

test twosquare-2.7 {Attempt to locate tip} {
    set c [createValidCipher]

    set result [catch {$c locate ttt zzz} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {No locate tip function defined for twosquare ciphers}}

test twosquare-2.8 {attempt to use solve proc} {
    set c [createValidCipher]

    set result [catch {$c solve} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {You cheat!}}

test twosquare-2.9 {Attempt to undo} {
    set c [createValidCipher]

    set result [catch {$c undo #} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {No undo function defined for twosquare ciphers}}

test twosquare-2.10 {Attempt to substitute} {
    set c [cipher create twosquare]

    set result [catch {$c substitute 3 2 a} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {No substitute function defined for twosquare ciphers}}

test twosquare-2.11 {Get plaintext with no ciphertext} {
    set c [cipher create twosquare]

    set result [catch {$c cget -pt} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can't do anything until ciphertext has been set}}

test twosquare-2.12 {encode with non-listified key} {
    set c [cipher create twosquare]

    set result [catch {$c encode foobar "abc \{bc"} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {unmatched open brace in list}}

test twosquare-2.13 {encode with too many key elements} {
    set c [cipher create twosquare]

    set result [catch {$c encode foobar "a b c"} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid number of items in encoding key 'a b c'.  Should have found 2.}}

test twosquare-2.14 {encode with short key elements} {
    set c [cipher create twosquare]

    set result [catch {$c encode foobar "a b"} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid length of key elements.}}

test twosquare-3.1 {use of cget -length} {
    set c [cipher create twosquare]
    set result [list [$c cget -length]]
   rename $c {}
    
    set result
} {0}

test twosquare-3.2 {use of cget -length} {
    set c [createValidCipher]
    set result [list [$c cget -length]]
   rename $c {}
    
    set result
} {22}

test twosquare-3.3 {use of cget -period} {
    set c [createValidCipher]
    set result [list [$c cget -period]]
    rename $c {}
    
    set result
} {0}

test twosquare-3.4 {use of cget -ct} {
    set c [cipher create twosquare]
    set result [$c cget -ct]
    rename $c {}
    
    set result
} {{}}

test twosquare-3.5 {use of cget -ct} {
    set c [createValidCipher]
    set result [$c cget -ct]
    rename $c {}
    
    set result
} {irrtehmkgimeqgrunmmzsv}

test twosquare-3.6 {set ciphertext with uppercase letters} {
    set c [cipher create twosquare -ct "Abcde Fghij Klmno Pqrst"]
    set result [$c cget -ct]
    rename $c {}
    
    set result
} {abcdefghiiklmnopqrst}

test twosquare-3.7 {use of cget -pt with even period} {
    set c [createValidCipher]
    set result [$c cget -pt]
    rename $c {}
    
    set result
} {                      }

test twosquare-3.8 {use of cget -key} {
    set c [createValidCipher]
    set result [list [string length [lindex [$c cget -key] 0]] [string length [lindex [$c cget -key] 1]] [$c cget -key]]
    rename $c {}
    
    set result
} {25 25 {{                         } {                         }}}

test twosquare-3.9 {use of cget -type} {
    set c [createValidCipher]
    set result [$c cget -type]
    rename $c {}
    
    set result
} {twosquare}

test twosquare-3.10 {use of undo} {unimplemented} {
    set c [createValidCipher]
    $c substitute abcdefghij bcdefghijk
    $c undo abc
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {}

test twosquare-3.11 {get default language} {
    set c [createValidCipher]

    set result [$c cget -language]
    rename $c {}
    
    set result
} {english}

test twosquare-3.12 {set/get language} {monolingual} {
    set c [createValidCipher]

    $c configure -language german
    set result [$c cget -language]
    rename $c {}
    
    set result
} {german}

test twosquare-7.1 {restore test} {} {
    set c [createValidCipher]
    $c restore dialoguebcfhkmnpqrstvwxyz biographycdefklmnqstuvwxz
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {{dialoguebcfhkmnpqrstvwxyz biographycdefklmnqstuvwxz} anotherdigraphicsetupx}

test twosquare-7.2 {restore test with spaces in restoration key} {} {
    set c [createValidCipher]
    $c restore "   loguebcfhkmnpqrstvwxyz" "biographycdefklmnqstuv   "
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {{{   loguebcfhkmnpqrstvwxyz} {biographycdefklmnqstuv   }} { notherd  raph csetup }}

test twosquare-8.1 {encode} {
    set c [cipher create twosquare]

    set result [list [$c encode "anotherdigraphicsetupx" [list dialoguebcfhkmnpqrstvwxyz biographycdefklmnqstuvwxz]]]
    lappend result [$c cget -ct] [$c cget -pt] [$c cget -key]
    rename $c {}

    set result
} {irrtehmkgimeqgrunmmzsv irrtehmkgimeqgrunmmzsv anotherdigraphicsetupx {dialoguebcfhkmnpqrstvwxyz biographycdefklmnqstuvwxz}}

test twosquare-8.2 {encode adds necessary nulls} {
    set c [cipher create twosquare]

    set result [list [$c encode "anotherdigraphicsetup" [list dialoguebcfhkmnpqrstvwxyz biographycdefklmnqstuvwxz]]]
    lappend result [$c cget -ct] [$c cget -pt] [$c cget -key]
    rename $c {}

    set result
} {irrtehmkgimeqgrunmmzsv irrtehmkgimeqgrunmmzsv anotherdigraphicsetupx {dialoguebcfhkmnpqrstvwxyz biographycdefklmnqstuvwxz}}

test twosquare-8.3 {encode converts 'j' to 'i'} {
    set c [cipher create twosquare]

    set result [list [$c encode "anotherdjgraphjcsetup" [list dialoguebcfhkmnpqrstvwxyz biographycdefklmnqstuvwxz]]]
    lappend result [$c cget -ct] [$c cget -pt] [$c cget -key]
    rename $c {}

    set result
} {irrtehmkgimeqgrunmmzsv irrtehmkgimeqgrunmmzsv anotherdigraphicsetupx {dialoguebcfhkmnpqrstvwxyz biographycdefklmnqstuvwxz}}

test twosquare-8.4 {encode plaintext contains invalid characters} {
    set c [cipher create twosquare]

    set result [list [$c encode "anoth erdjg r-+=aphjcsetup" [list dialoguebcfhkmnpqrstvwxyz biographycdefklmnqstuvwxz]]]
    lappend result [$c cget -ct] [$c cget -pt] [$c cget -key]
    rename $c {}

    set result
} {irrtehmkgimeqgrunmmzsv irrtehmkgimeqgrunmmzsv anotherdigraphicsetupx {dialoguebcfhkmnpqrstvwxyz biographycdefklmnqstuvwxz}}
