# myszcowski.test
# Test of the myszcowski cipher type

package require cipher

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}

# Sample myszcowski cipher:
#
# nopee ounri hatrw rkynl tesne smnme tknfa rsill wtoat
# deroo cmtcm atpen deder uraub aefcs
#
# Laid out:
#
# i n c o m p
# l e t e c o
# l u m n a r
# w i t h p a
# t t e r n w
# o r d k e y
# a n d l e t
# t e r s u n
# d e r s a m
# e n u m b e
# r t a k e n
# o f f a c r
# o s s
#
# Solution: (2 1 3 1 3 1)
#
# incompletecolumnarwithpatternwordkeyandlettersundersamenumbertakenoffacross

proc createValidCipher {} {
    set c [cipher create myszcowski -ct "nopee ounri hatrw rkynl tesne smnme tknfa rsill wtoat deroo cmtcm atpen deder uraub aefcs"]

    return $c
}

# Test groups:
#	1.x	Invalid type and number of arguments to cipher command
#	2.x	Invalid range of arguments to cipher command
#       3.x     Valid trivial cipher command usage
#       4.x     Restore tests
#       5.x     Column swap tests
#       6.x     Shift tests
#       7.x     Encode tests

test myszcowski-1.1 {invalid use of options} {
    set c [createValidCipher]
    set result [catch {$c} msg]
    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar ?option?}}

test myszcowski-1.2 {use of invalid option} {
    set c [createValidCipher]
    set result [list [catch {$c configure -foo 5} msg] $msg]
    rename $c {}
    
    set result
} {1 {Unknown option -foo}}

test myszcowski-1.3 {invalid use of cget} {
    set c [createValidCipher]

    set result [catch {$c cget} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar cget option}}

test myszcowski-1.4 {invalid use of cget} {
    set c [createValidCipher]

    set result [catch {$c cget foo} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Unknown option foo}}

test myszcowski-1.5 {invalid use of configure} {
    set c [createValidCipher]

    set result [catch {$c configure} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar configure ?option value?}}

test myszcowski-1.6 {invalid use of restore} {
    set c [createValidCipher]

    set result [catch {$c restore} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar restore key}}

test myszcowski-1.7 {Invalid use of substitute} {
    set c [createValidCipher]

    set result [catch {$c substitute} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar substitute col val}}

test myszcowski-1.8 {invalid use of swap} {
    set c [createValidCipher]

    set result [catch {$c swap} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar swap col1 col2}}

test myszcowski-1.9 {invalid period setting} {
    set c [createValidCipher]

    set result [catch {$c configure -period -1} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid period setting.}}

test myszcowski-1.10 {invalid period setting} {
    set c [createValidCipher]

    set result [catch {$c configure -period 1000} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid period setting.}}

test myszcowski-1.11 {invalid use of configure -stepinterval} {
    set c [createValidCipher]

    set result [catch {$c configure -stepinterval a} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid interval.}}

test myszcowski-1.12 {invalid use of configure -stepinterval} {
    set c [createValidCipher]

    set result [catch {$c configure -stepinterval -1} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid interval.}}

test myszcowski-1.13 {invalid use myszcowski command} {
    set c [createValidCipher]

    set result [catch {$c foo} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Unknown option foo
Must be one of:  ciphervar cget ?option?
                 ciphervar configure ?option value?
                 ciphervar restore key
                 ciphervar substitute col val
                 ciphervar shift col amount
                 ciphervar swap col1 col2
                 ciphervar solve
                 ciphervar undo ct
                 ciphervar encode pt key}}

test myszcowski-2.1 {bad swap columns} {
    set c [createValidCipher]

    $c configure -period 6
    set result [catch {$c swap 1 d} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Bad column index '1'}}

test myszcowski-2.2 {bad swap columns} {
    set c [createValidCipher]

    $c configure -period 6
    set result [catch {$c swap a 1} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Bad column index '1'}}

test myszcowski-2.3 {swap with no period set} {
    set c [createValidCipher]

    set result [catch {$c swap 1 2} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can't swap columns until the period has been set.}}

test myszcowski-2.4 {swap with no ciphertext set} {
    set c [cipher create myszcowski]

    set result [catch {$c swap 1 2} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can't swap columns until the period has been set.}}

test myszcowski-2.5 {no valid characters in ciphertext} {
    set c [cipher create myszcowski]

    set result [catch {$c configure -ct 11111} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {No valid characters found in ciphertext}}

test myszcowski-2.6 {restore with no period set} {
    set c [createValidCipher]

    set result [catch {$c restore aaaa} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can't restore until the period has been set.}}

test myszcowski-2.7 {restore with invalid characters} {
    set c [createValidCipher]

    $c configure -period 6
    set result [catch {$c restore 111111} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid character in key}}

test myszcowski-2.8 {restore with characters out of range} {
    set c [createValidCipher]

    $c configure -period 6
    set result [catch {$c restore abcdeg} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid character in key}}

test myszcowski-2.9 {restore with no ciphertext} {
    set c [cipher create myszcowski]

    set result [catch {$c restore abcdef} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can't restore until the ciphertext has been set.}}

test myszcowski-2.10 {restore with invalid key length} {
    set c [createValidCipher]

    $c configure -period 2
    set result [catch {$c restore abc} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Length of key does not match the period.}}

test myszcowski-2.11 {restore with invalid key (invalid chars)} {
    set c [createValidCipher]

    $c configure -period 6
    set result [catch {$c restore a8cdef} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid character in key}}

test myszcowski-2.12 {solve with no ciphertext} {
    set c [cipher create myszcowski]

    set result [catch {$c solve} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can't solve until the ciphertext has been set.}}

test myszcowski-2.13 {solve with no period} {
    set c [createValidCipher]

    set result [catch {$c solve} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can't solve until the period has been set.}}

test myszcowski-2.14 {shift with no ciphertext} {
    set c [cipher create myszcowski]

    set result [catch {$c shift a 1} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can't do anything until ciphertext has been set}}

test myszcowski-2.15 {shift with no period} {
    set c [createValidCipher]

    set result [catch {$c shift a 1} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can't do anything until period has been set}}

test myszcowski-2.16 {shift an invalid column} {
    set c [createValidCipher]
    $c configure -period 6

    set result [catch {$c shift g 1} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Bad column index}}

test myszcowski-2.17 {shift first column backwards} {
    set c [createValidCipher]
    $c configure -period 6

    set result [catch {$c shift a -1} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can't shift backwards past the first column.}}

test myszcowski-2.18 {shift last column backwards too far} {
    set c [createValidCipher]
    $c configure -period 6

    set result [catch {$c shift c -3} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can't shift backwards past the first column.}}

test myszcowski-2.19 {encode with non-listified key} {
    set c [cipher create myszcowski]

    set result [catch {$c encode foobar "abc \{bc"} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {unmatched open brace in list}}

test myszcowski-2.20 {encode with too many key elements} {
    set c [cipher create myszcowski]

    set result [catch {$c encode foobar "1 2"} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid number of items in encoding key '1 2'.  Should have found 1.}}

test myszcowski-2.21 {encode with short key elements} {
    set c [cipher create myszcowski]
    $c configure -period 5

    set result [catch {$c encode foobar "123"} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Length of key does not match the period.}}

test myszcowski-3.1 {successful use of cget -length} {
    set c [createValidCipher]
    set result [$c cget -length]
    rename $c {}
    
    set result
} {75}

test myszcowski-3.2 {get period (not set)} {
    set c [createValidCipher]
    set result [$c cget -period]
    rename $c {}
    
    set result
} {0}

test myszcowski-3.3 {get period} {
    set c [createValidCipher]
    $c configure -period 6
    set result [$c cget -period]
    rename $c {}
    
    set result
} {6}

test myszcowski-3.4 {successful use of cget -ct (empty)} {
    set c [cipher create myszcowski]
    set result [$c cget -ct]
    rename $c {}
    
    set result
} {{}}

test myszcowski-3.5 {successful use of cget -ct} {
    set c [createValidCipher]
    set result [$c cget -ct]
    rename $c {}
    
    set result
} {nopeeounrihatrwrkynltesnesmnmetknfarsillwtoatderoocmtcmatpendederuraubaefcs}

test myszcowski-3.6 {successful use of cget -type} {
    set c [createValidCipher]
    set result [$c cget -type]
    rename $c {}
    
    set result
} {myszcowski}

test myszcowski-3.7 {successful use of configure -ct} {
    set c [createValidCipher]
    set result [$c configure -ct "aaaaabbbbbcccccdddddeeeee"]
    rename $c {}
    
    set result
} {aaaaabbbbbcccccdddddeeeee}

test myszcowski-3.8 {set ciphertext with uppercase letters} {
    set c [cipher create myszcowski -ct "Abcde Fghij Klmno"]
    set result [$c cget -ct]
    rename $c {}
    
    set result
} {abcdefghijklmno}

test myszcowski-3.9 {successful retrieval of plaintext} {
    set c [createValidCipher]
    $c configure -period 6
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {abcdef nrmlmeownwtrprmtcuekeomreytaaaonkttuulndpbntfeearearneisrodfhnsoecaeicdstsl}

test myszcowski-3.10 {successful use of undo} {
    set c [createValidCipher]
    $c configure -period 6
    $c swap a c
    $c undo
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {abcdef nrmlmeownwtrprmtcuekeomreytaaaonkttuulndpbntfeearearneisrodfhnsoecaeicdstsl}

test myszcowski-3.11 {get default stepinterval} {
    set c [createValidCipher]

    set result [$c cget -stepinterval]
    rename $c {}
    
    set result
} {0}

test myszcowski-3.12 {set/get stepinterval (set to 0)} {
    set c [createValidCipher]

    $c configure -stepinterval 0
    set result [$c cget -stepinterval]
    rename $c {}
    
    set result
} {0}

test myszcowski-3.13 {set/get stepinterval} {
    set c [createValidCipher]

    $c configure -stepinterval 10000
    set result [$c cget -stepinterval]
    rename $c {}
    
    set result
} {10000}

test myszcowski-3.14 {get default stepcommand} {
    set c [createValidCipher]

    set result [$c cget -stepcommand]
    rename $c {}
    
    set result
} {}

test myszcowski-3.15 {set/get stepcommand (set to null)} {
    set c [createValidCipher]

    $c configure -stepcommand {}
    set result [$c cget -stepcommand]
    rename $c {}
    
    set result
} {}

test myszcowski-3.16 {set/get stepcommand} {
    set c [createValidCipher]

    $c configure -stepcommand puts
    set result [$c cget -stepcommand]
    rename $c {}
    
    set result
} {puts}

test myszcowski-3.17 {get default bestfitcommand} {
    set c [createValidCipher]

    set result [$c cget -bestfitcommand]
    rename $c {}
    
    set result
} {}

test myszcowski-3.18 {set/get bestfitcommand (set to null)} {
    set c [createValidCipher]

    $c configure -bestfitcommand {}
    set result [$c cget -bestfitcommand]
    rename $c {}
    
    set result
} {}

test myszcowski-3.19 {set/get bestfitcommand} {
    set c [createValidCipher]

    $c configure -bestfitcommand puts
    set result [$c cget -bestfitcommand]
    rename $c {}
    
    set result
} {puts}

test myszcowski-3.20 {get default language} {
    set c [createValidCipher]

    set result [$c cget -language]
    rename $c {}
    
    set result
} {english}

test myszcowski-3.21 {set/get language} {monolingual} {
    set c [createValidCipher]

    $c configure -language german
    set result [$c cget -language]
    rename $c {}
    
    set result
} {german}

test myszcowski-3.22 {Set the ciphertext after setting the period} {
    set c [cipher create myszcowski -period 6]
    $c configure -ct "nopee ounri hatrw rkynl tesne smnme tknfa rsill wtoat deroo cmtcm atpen deder uraub aefcs"
    set result [list [$c cget -period] [$c cget -pt]]
} {6 nrmlmeownwtrprmtcuekeomreytaaaonkttuulndpbntfeearearneisrodfhnsoecaeicdstsl}

test myszcowski-3.23 {Set the ciphertext after setting the period triggers a period reset} {
    set c [cipher create myszcowski -period 15]
    $c configure -ct "nldof lbcui elk"
    set result [$c cget -period]
} {0}

test myszcowski-4.1 {restore} {
    set c [createValidCipher]
    $c configure -period 6
    $c restore abcdef
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {abcdef nrmlmeownwtrprmtcuekeomreytaaaonkttuulndpbntfeearearneisrodfhnsoecaeicdstsl}

test myszcowski-4.2 {restore with duplicate key values} {
    set c [createValidCipher]
    $c configure -period 6
    $c restore bacaca
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {bacaca incompletecolumnarwithpatternwordkeyandlettersundersamenumbertakenoffacross}

test myszcowski-5.1 {swap} {
    set c [createValidCipher]
    $c configure -period 6
    $c swap a b
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {bacdef rnmlmewonwtrrpmtcukeeomryetaaanokttulundpbtnfeeaerarnesirodfnhsoeceaicdsstl}

test myszcowski-5.2 {multiple swap} {
    set c [createValidCipher]
    $c configure -period 6
    $c swap a b
    $c swap b c
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {cabdef mnrlmenowwtrmprtcueekomrteyaaakonttunuldpbfnteeaarernerisodfshnoeciaecdslts}

test myszcowski-6.1 {shift by 0 has no effect} {
    set c [createValidCipher]
    $c configure -period 6
    $c shift b 0
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {abcdef nrmlmeownwtrprmtcuekeomreytaaaonkttuulndpbntfeearearneisrodfhnsoecaeicdstsl}

test myszcowski-6.2 {simple shift by 1} {
    set c [createValidCipher]
    $c configure -period 6
    $c shift a 1
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {bacdef rnmlmewonwtrrpmtcukeeomryetaaanokttulundpbtnfeeaerarnesirodfnhsoeceaicdsstl}

test myszcowski-6.3 {shift by 4 stops at end of columns} {
    set c [createValidCipher]
    $c configure -period 6
    $c shift a 7
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {bcdefa tslmenrmltrownwcuprmtmrekeoaaeytatuonktpbulndeantfenereardfisroechnsodsaeic}

test myszcowski-6.4 {shift by negative amount} {
    set c [createValidCipher]
    $c configure -period 6
    $c shift b -1
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {bacdef rnmlmewonwtrrpmtcukeeomryetaaanokttulundpbtnfeeaerarnesirodfnhsoeceaicdsstl}

test myszcowski-6.5 {shift by negative amount} {
    set c [createValidCipher]
    $c configure -period 6
    $c shift c -2
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {cabdef mnrlmenowwtrmprtcueekomrteyaaakonttunuldpbfnteeaarernerisodfshnoeciaecdslts}

test myszcowski-6.6 {shift twice} {
    set c [createValidCipher]
    $c configure -period 6
    $c shift a 1
    $c shift b 1
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {abcdef nrmlmeownwtrprmtcuekeomreytaaaonkttuulndpbntfeearearneisrodfhnsoecaeicdstsl}

test myszcowski-7.1 {encode myszcowski} {
    set c [cipher create myszcowski -period 6]

    set result [$c encode "incomplete columnar with pattern word key and letters under same number taken off across" [list bacaca]]

    lappend result [$c cget -ct] [$c cget -pt] [$c cget -key]
    rename $c {}

    set result
} {nopeeounrihatrwrkynltesnesmnmetknfarsillwtoatderoocmtcmatpendederuraubaefcs nopeeounrihatrwrkynltesnesmnmetknfarsillwtoatderoocmtcmatpendederuraubaefcs incompletecolumnarwithpatternwordkeyandlettersundersamenumbertakenoffacross bacaca}
