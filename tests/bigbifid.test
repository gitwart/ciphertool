# bigbifid.test
# Test of the 6x6 bifid cipher type

package require cipher

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}

# Helper routine for testing the bifid cipher
# Laid out, the cipher looks like:
#
# v0eii64 vfe4b95 jjebv9
#
# Solution:
#
# oddperiodsarepopular
#
# Key:  e5xtra6g7h81fsuvjo3qzw0dcpmlk42byn9i


proc createValidCipher {} {
    set c [cipher create bigbifid -ct "v0eii64 vfe4b95 jjebv9"]

    return $c
}

# Test groups:
#	1.x	Invalid type and number of arguments to cipher command
#	2.x	Invalid range of arguments to cipher command
#       3.x     Valid trivial cipher command usage
#       4.x     Substitution tests
#       5.x     Substitution tests
#	7.x	Save/Restore tests
#	8.x	Encoding tests

test bigbifid-1.1 {invalid use of options} {
    set c [createValidCipher]
    set result [catch {$c} msg]
    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar ?option?}}

test bigbifid-1.2 {use of invalid option} {
    set c [createValidCipher]
    set result [list [catch {$c configure -foobar 5} msg] $msg]
    rename $c {}
    
    set result
} {1 {Unknown option -foobar}}

test bigbifid-1.3 {invalid use of cget} {
    set c [createValidCipher]

    set result [catch {$c cget} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar cget option}}

test bigbifid-1.4 {invalid use of cget} {
    set c [createValidCipher]

    set result [catch {$c cget foo} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Unknown option foo}}

test bigbifid-1.5 {invalid use of configure} {
    set c [createValidCipher]

    set result [catch {$c configure} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar configure ?option value?}}

test bigbifid-1.6 {invalid configure option} {
    set c [createValidCipher]

    set result [catch {$c configure -foo bar} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Unknown option -foo}}

test bigbifid-1.7 {invalid use of restore} {
    set c [createValidCipher]

    set result [catch {$c restore} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar restore key}}

test bigbifid-1.8 {invalid use of substitute} {
    set c [createValidCipher]

    set result [catch {$c substitute foo} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar substitute row col pt}}

test bigbifid-1.9 {invalid use of undo} {
    set c [createValidCipher]

    set result [catch {$c undo} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar undo ct}}

test bigbifid-1.10 {invalid use of locate} {
    set c [createValidCipher]

    set result [catch {$c locate} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar locate pt ct}}

test bigbifid-1.11 {invalid use of configure -period} {
    set c [createValidCipher]

    set result [catch {$c configure -period a} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid period setting.}}

test bigbifid-1.12 {invalid use bigbifid command} {
    set c [createValidCipher]

    set result [catch {$c foo} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Unknown option foo
Must be one of:  ciphervar cget ?option?
                 ciphervar configure ?option value?
                 ciphervar solve
                 ciphervar substitute row col pt
                 ciphervar restore key
                 ciphervar undo ct
                 ciphervar locate pt ct
                 ciphervar encode pt key}}

test bigbifid-2.1 {invalid cipher characters} {
    set c [cipher create bigbifid]

    set result [catch {$c configure -ct ####} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {No valid characters found in ciphertext}}

test bigbifid-2.2 {invalid length of restore key} {
    set c [createValidCipher]

    set result [catch {$c restore aabc} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid length for key.}}

test bigbifid-2.3 {invalid character in restore key} {
    set c [createValidCipher]

    set result [catch {$c restore #bcdefghijklmnopqrstuvwxyz0123456789} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid key.}}

test bigbifid-2.4 {duplicate character in restore key} {
    set c [createValidCipher]

    set result [catch {$c restore aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid key.}}

test bigbifid-2.5 {Attempt to locate tip} {
    set c [createValidCipher]

    set result [catch {$c locate ttt zzz} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {No locate tip function defined for bigbifid ciphers.}}

test bigbifid-2.6 {attempt to use solve proc} {
    set c [createValidCipher]

    set result [catch {$c solve} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {You cheat!}}

test bigbifid-2.7 {Attempt to undo invalid character} {
    set c [createValidCipher]

    set result [catch {$c undo #} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Attempt to undo invalid character.}}

test bigbifid-2.8 {Substitute with invalid row} {
    set c [cipher create bigbifid]

    set result [catch {$c substitute 0 2 a} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid row value.  Value must be between 1 and 6.}}

test bigbifid-2.9 {Substitute with invalid column} {
    set c [cipher create bigbifid]

    set result [catch {$c substitute 2 0 a} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid column value.  Value must be between 1 and 6.}}

test bigbifid-2.10 {Substitute with invalid letter} {
    set c [cipher create bigbifid]

    set result [catch {$c substitute 1 2 #} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid letter value.}}

test bigbifid-2.11 {Get plaintext with no ciphertext} {
    set c [cipher create bigbifid]

    set result [catch {$c cget -pt} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can't do anything until ciphertext has been set}}

test bigbifid-2.12 {Get plaintext with no period} {
    set c [createValidCipher]

    set result [catch {$c cget -pt} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can't do anything until a period has been set}}

test bigbifid-2.13 {encode with non-listified key} {
    set c [cipher create bigbifid]

    set result [catch {$c encode foobar "abc \{bc"} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {unmatched open brace in list}}

test bigbifid-2.14 {Encode with no period} {
    set c [createValidCipher]

    set result [catch {$c encode foobar {abcdefghiklmnopqrstuvwxyz}} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can not encode bifid until a period has been set.}}

test bigbifid-2.15 {Encode invalid number of key elements} {
    set c [createValidCipher]
    $c configure -period 5

    set result [catch {$c encode foobar "a b c"} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid number of items in encoding key 'a b c'.  Should have found 1.}}

test bigbifid-2.16 {Encode with invalid key length} {
    set c [createValidCipher]
    $c configure -period 5

    set result [catch {$c encode foobar "ab"} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid length of key: 2}}

test bigbifid-3.1 {use of cget -length} {
    set c [cipher create bigbifid]
    set result [list [$c cget -length]]
   rename $c {}
    
    set result
} {0}

test bigbifid-3.2 {use of cget -length} {
    set c [createValidCipher]
    set result [list [$c cget -length]]
   rename $c {}
    
    set result
} {20}

test bigbifid-3.3 {use of cget -period} {
    set c [createValidCipher]
    $c configure -period 6
    set result [list [$c cget -period]]
    rename $c {}
    
    set result
} {6}

test bigbifid-3.4 {use of cget -ct} {
    set c [cipher create bigbifid]
    set result [$c cget -ct]
    rename $c {}
    
    set result
} {{}}

test bigbifid-3.5 {use of cget -ct} {
    set c [createValidCipher]
    set result [$c cget -ct]
    rename $c {}
    
    set result
} {v0eii64vfe4b95jjebv9}

test bigbifid-3.6 {set ciphertext with uppercase letters} {
    set c [cipher create bigbifid -ct "Abcde Fghij Klmno"]
    set result [$c cget -ct]
    rename $c {}
    
    set result
} {abcdefghijklmno}

test bigbifid-3.7 {use of cget -pt with odd period} {
    set c [createValidCipher]
    $c configure -period 7
    set result [$c cget -pt]
    rename $c {}
    
    set result
} {                    }

test bigbifid-3.8 {use of cget -pt with even period} {
    set c [createValidCipher]
    $c configure -period 10
    set result [$c cget -pt]
    rename $c {}
    
    set result
} {                    }

test bigbifid-3.9 {use of cget -key} {
    set c [createValidCipher]
    set result [list [string length [$c cget -key]] [$c cget -key]]
    rename $c {}
    
    set result
} {36 {                                    }}

test bigbifid-3.10 {use of cget -type} {
    set c [createValidCipher]
    set result [$c cget -type]
    rename $c {}
    
    set result
} {bigbifid}

test bigbifid-3.11 {use of undo} {unimplemented} {
    set c [createValidCipher]
    $c substitute abcdefghij bcdefghijk
    $c undo abc
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {}

test bigbifid-3.12 {get default language} {
    set c [createValidCipher]

    set result [$c cget -language]
    rename $c {}
    
    set result
} {english}

test bigbifid-3.13 {set/get language} {monolingual} {
    set c [createValidCipher]

    $c configure -language german
    set result [$c cget -language]
    rename $c {}
    
    set result
} {german}

test bigbifid-4.1 {single substitution - key corner} {
    set c [createValidCipher]
    
    $c configure -period 6
    $c substitute 1 1 a
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}

    set result
} {{a                                   } {                    }}

test bigbifid-4.2 {single substitution - key corner} {
    set c [createValidCipher]
    
    $c configure -period 6
    $c substitute 6 6 a
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}

    set result
} {{                                   a} {                    }}

test bigbifid-4.3 {single substitution - key corner} {
    set c [createValidCipher]
    
    $c configure -period 6
    $c substitute 1 6 a
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}

    set result
} {{     a                              } {                    }}

test bigbifid-4.4 {single substitution - key corner} {
    set c [createValidCipher]
    
    $c configure -period 6
    $c substitute 6 1 a
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}

    set result
} {{                              a     } {                    }}

test bigbifid-4.5 {substitute the same letter in two positions} {
    set c [createValidCipher]
    
    $c configure -period 6
    $c substitute 6 1 k
    $c substitute 1 1 k
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}

    set result
} {{k                                   } {                    }}

test bigbifid-4.6 {substitute different letters in the same position} {
    set c [createValidCipher]
    
    $c configure -period 6
    $c substitute 1 1 k
    $c substitute 1 1 a
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}

    set result
} {{a                                   } {                    }}

test bigbifid-4.7 {substitution - produces non-null plaintext} {
    set c [createValidCipher]
    
    $c configure -period 7
    $c substitute 3 4 v
    $c substitute 3 6 o
    $c substitute 6 6 i
    $c substitute 4 5 0
    $c substitute 4 6 d
    set result [list [$c cget -key] [$c cget -bt] [$c cget -pt]]
    rename $c {}

    set result
} {{               v o    0d           i} {3445  6666    34                    34  } {odd                 }}

test bigbifid-5.1 {single undo - produces non-null plaintext} {
    set c [createValidCipher]
    
    $c configure -period 7
    $c substitute 3 4 v
    $c substitute 3 6 o
    $c substitute 6 6 i
    $c substitute 4 5 0
    $c substitute 4 6 d
    $c undo 0
    set result [list [$c cget -key] [$c cget -bt] [$c cget -pt]]
    rename $c {}

    set result
} {{               v o     d           i} {34    6666    34                    34  } {od                  }}

test bigbifid-5.2 {multiple undo - produces non-null plaintext} {
    set c [createValidCipher]
    
    $c configure -period 7
    $c substitute 3 4 v
    $c substitute 3 6 o
    $c substitute 6 6 i
    $c substitute 4 5 0
    $c substitute 4 6 d
    $c undo vo
    set result [list [$c cget -key] [$c cget -bt] [$c cget -pt]]
    rename $c {}

    set result
} {{                      0d           i} {  45  6666                              } {  d                 }}

test bigbifid-5.3 {multiple undo of the same letter} {
    set c [createValidCipher]
    
    $c configure -period 7
    $c substitute 3 4 v
    $c substitute 3 6 o
    $c substitute 6 6 i
    $c substitute 4 5 0
    $c substitute 4 6 d
    $c undo vv
    $c undo vv
    set result [list [$c cget -key] [$c cget -bt] [$c cget -pt]]
    rename $c {}

    set result
} {{                 o    0d           i} {  45  6666                              } {  d                 }}

test bigbifid-7.1 {restore test} {} {
    set c [createValidCipher]
    $c configure -period 7
    $c restore e5xtra6g7h81fsuvjo3qzw0dcpmlk42byn9i
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {e5xtra6g7h81fsuvjo3qzw0dcpmlk42byn9i oddperiodsarepopular}

test bigbifid-7.2 {restore with second dummy argument} {} {
    set c [createValidCipher]
    $c configure -period 7
    $c restore e5xtra6g7h81fsuvjo3qzw0dcpmlk42byn9i {}
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {e5xtra6g7h81fsuvjo3qzw0dcpmlk42byn9i oddperiodsarepopular}

test bigbifid-7.3 {save/restore test, empty key} {} {
    set c1 [createValidCipher]
    $c1 configure -period 7
    set key [$c1 cget -key]
    set c2 [createValidCipher]
    $c2 configure -period 7
    $c2 restore $key
    set result [list [$c2 cget -key] [$c2 cget -pt]]
    rename $c1 {}
    rename $c2 {}
    
    set result
} {{                                    } {                    }}

test bigbifid-7.4 {save/restore test, full key} {} {
    set c1 [createValidCipher]
    $c1 configure -period 7
    $c1 restore e5xtra6g7h81fsuvjo3qzw0dcpmlk42byn9i
    set key [$c1 cget -key]
    set c2 [createValidCipher]
    $c2 configure -period 7
    $c2 restore $key
    set result [list [$c2 cget -key] [$c2 cget -pt]]
    rename $c1 {}
    rename $c2 {}
    
    set result
} {e5xtra6g7h81fsuvjo3qzw0dcpmlk42byn9i oddperiodsarepopular}

test bigbifid-7.5 {save/restore test, key with spaces} {unimplemented} {
    set c1 [createValidCipher]
    $c1 configure -period 7
    $c1 restore {extr odinybcfghjklmpqsuvwz}
    set key [$c1 cget -key]
    set c2 [createValidCipher]
    $c2 configure -period 7
    $c2 restore $key
    set result [list [$c2 cget -key] [$c2 cget -pt]]
    rename $c1 {}
    rename $c2 {}
    
    set result
} {{extr odinybcfghjklmpqsuvwz} {bifids re   ction  edciph   }}

test bigbifid-8.1 {encode} {
    set c [cipher create bigbifid -period 7]
    set result [list [$c encode "odd periods are popular" e5xtra6g7h81fsuvjo3qzw0dcpmlk42byn9i]]
    lappend result [$c cget -ct] [$c cget -pt] [$c cget -keyword]
    rename $c {}

    set result
} {v0eii64vfe4b95jjebv9 v0eii64vfe4b95jjebv9 oddperiodsarepopular e5xtra6g7h81fsuvjo3qzw0dcpmlk42byn9i}
