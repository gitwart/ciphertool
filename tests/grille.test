# grille.test
# Test of the grille cipher type

package require cipher

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}

# Sample grille cipher:
#
# tilun rghge lteni r
#
# Laid out:
#
# t i l u
# n r g h
# g e l t
# e n i r
#
# Solution: (1000000101010000)
#
# t . . .   . . . u   . . . .   . i l .
# . . . h   . r . .   n . g .   . . . .
# . e . t   . . . .   g . . .   . . l .
# . . . .   . n i .   . . . r   e . . .
#
# Sample odd-width grille cipher:
#
# a b c d e
# f g h i k
# l m n o p
# q r s t u
# v w x y z
#
# Solution  (0101000110100000000010000)
# bdhilv ackotu eprswy fgmqxz n


proc createValidCipher {} {
    set c [cipher create grille -ct "tilun rghge lteni r"]

    return $c
}

# Procedures for displaying the solution process

proc show_best_fit {step key value pt} {
    puts "#$key\tFit:  $value"
    puts "#$step: $pt"
    puts ""
}

proc show_fit {step key pt} {
    puts #$key
    puts "#$step: $pt"
    puts ""
}

# Test groups:
#	1.x	Invalid type and number of arguments to cipher command
#	2.x	Invalid range of arguments to cipher command
#       3.x     Valid trivial cipher command usage
#       4.x     Substitution tests
#       5.x     Restore tests
#       6.x     Undo tests

test grille-1.1 {invalid use of options} {
    set c [createValidCipher]
    set result [catch {$c} msg]
    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar ?option?}}

test grille-1.2 {use of invalid option} {
    set c [createValidCipher]
    set result [list [catch {$c configure -foo 5} msg] $msg]
    rename $c {}
    
    set result
} {1 {Unknown option -foo}}

test grille-1.3 {invalid use of cget} {
    set c [createValidCipher]

    set result [catch {$c cget} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar cget option}}

test grille-1.4 {invalid use of cget} {
    set c [createValidCipher]

    set result [catch {$c cget foo} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Unknown option foo}}

test grille-1.5 {invalid use of configure} {
    set c [createValidCipher]

    set result [catch {$c configure} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar configure ?option value?}}

test grille-1.6 {invalid use of restore} {
    set c [createValidCipher]

    set result [catch {$c restore} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar restore key ?junk?}}

test grille-1.7 {invalid args for substitute} {
    set c [createValidCipher]

    set result [catch {$c substitute} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar substitute row col ?orientation?}}

test grille-1.8 {invalid args for undo} {
    set c [createValidCipher]

    set result [catch {$c undo 1} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar undo}}

test grille-1.9 {invalid args for solve} {
    set c [createValidCipher]

    set result [catch {$c solve 1} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar solve}}

test grille-1.10 {invalid use of configure -stepinterval} {
    set c [createValidCipher]

    set result [catch {$c configure -stepinterval a} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid interval.}}

test grille-1.11 {invalid use of configure -stepinterval} {
    set c [createValidCipher]

    set result [catch {$c configure -stepinterval -1} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid interval.}}

test grille-1.12 {attempt to get ptblock with no ciphertext} {
    set c [cipher create grille]

    set result [catch {$c cget -ptblock} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can't do anything until ciphertext has been set}}

test grille-1.13 {invalid use grille command} {
    set c [createValidCipher]

    set result [catch {$c foo} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Unknown option foo
Must be one of:  ciphervar cget ?option?
                 ciphervar configure ?option value?
                 ciphervar restore key
                 ciphervar solve
                 ciphervar substitute row col
                 ciphervar undo}}

test grille-2.1 {no valid characters in ciphertext} {
    set c [cipher create grille]

    set result [catch {$c configure -ct 11111} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {No valid characters found in ciphertext}}

test grille-2.2 {invalid ciphertext length} {
    set c [cipher create grille]

    set result [catch {$c configure -ct abc} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid cipher length '3'.  Length must be a perfect square.}}

test grille-2.3 {restore with no ciphertext set} {
    set c [cipher create grille]

    set result [catch {$c restore aaaa} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can't do anything until ciphertext has been set}}

test grille-2.4 {restore with invalid characters} {
    set c [createValidCipher]

    set result [catch {$c restore aaaaaaaaaaaaaaaa} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid character found in key}}

test grille-2.5 {restore with characters out of range} {
    set c [createValidCipher]

    $c configure -period 3
    set result [catch {$c restore 1234123412341235} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid character found in key}}

test grille-2.6 {restore with invalid key length} {
    set c [createValidCipher]

    $c configure -period 2
    set result [catch {$c restore abc} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Key length must match the ciphertext length}}

test grille-2.7 {solve with no ciphertext} {
    set c [cipher create grille]

    set result [catch {$c solve} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can't do anything until ciphertext has been set}}

test grille-2.8 {substitute with invalid row} {
    set c [createValidCipher]

    set result [catch {$c substitute a 1} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid row (a) in substitution.}}

test grille-2.9 {substitute with invalid column} {
    set c [createValidCipher]

    set result [catch {$c substitute 1 a} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid column (a) in substitution.}}

test grille-2.10 {substitute with invalid orientation} {
    set c [createValidCipher]

    set result [catch {$c substitute 1 1 a} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid orientation a}}

test grille-2.11 {substitute with row out of range} {
    set c [createValidCipher]

    set result [catch {$c substitute 15 1} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid row setting}}

test grille-2.12 {substitute with column out of range} {
    set c [createValidCipher]

    set result [catch {$c substitute 1 15} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid column setting}}

test grille-2.13 {substitute with orientation out of range} {
    set c [createValidCipher]

    set result [catch {$c substitute 1 1 15} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid orientation setting}}

test grille-2.14 {substitute center of an odd-width grille} {
    set c [cipher create grille -ct abcdefghi]

    set result [catch {$c substitute 2 2} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can't substitute for the middle space in an odd-width grille.}}

test grille-3.1 {successful use of cget -length} {
    set c [createValidCipher]
    set result [$c cget -length]
    rename $c {}
    
    set result
} {16}

test grille-3.2 {get period (not set)} {
    set c [createValidCipher]
    set result [$c cget -period]
    rename $c {}
    
    set result
} {4}

test grille-3.3 {successful use of cget -ct (empty)} {
    set c [cipher create grille]
    set result [$c cget -ct]
    rename $c {}
    
    set result
} {{}}

test grille-3.4 {successful use of cget -ct} {
    set c [createValidCipher]
    set result [$c cget -ct]
    rename $c {}
    
    set result
} {tilunrghgeltenir}

test grille-3.5 {set ciphertext with uppercase letters} {
    set c [cipher create grille -ct "Abcde Fghij Klmno Pqrst Uvwxy"]
    set result [$c cget -ct]
    rename $c {}
    
    set result
} {abcdefghijklmnopqrstuvwxy}

test grille-3.6 {successful use of cget -type} {
    set c [createValidCipher]
    set result [$c cget -type]
    rename $c {}
    
    set result
} {grille}

test grille-3.7 {successful use of configure -ct} {
    set c [createValidCipher]
    set result [$c configure -ct "abcdefghijklmnop"]
    rename $c {}
    
    set result
} {abcdefghijklmnop}

test grille-3.8 {successful retrieval of plaintext (no key)} {
    set c [createValidCipher]
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {0000000000000000 {                }}

test grille-3.9 {successful use of undo} {
    set c [createValidCipher]
    $c substitute 1 1
    $c undo
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {0000000000000000 {                }}

test grille-3.10 {get default stepinterval} {
    set c [createValidCipher]

    set result [$c cget -stepinterval]
    rename $c {}
    
    set result
} {0}

test grille-3.11 {set/get stepinterval (set to 0)} {
    set c [createValidCipher]

    $c configure -stepinterval 0
    set result [$c cget -stepinterval]
    rename $c {}
    
    set result
} {0}

test grille-3.12 {set/get stepinterval} {
    set c [createValidCipher]

    $c configure -stepinterval 10000
    set result [$c cget -stepinterval]
    rename $c {}
    
    set result
} {10000}

test grille-3.13 {get default stepcommand} {
    set c [createValidCipher]

    set result [$c cget -stepcommand]
    rename $c {}
    
    set result
} {}

test grille-3.14 {set/get stepcommand (set to null)} {
    set c [createValidCipher]

    $c configure -stepcommand {}
    set result [$c cget -stepcommand]
    rename $c {}
    
    set result
} {}

test grille-3.15 {set/get stepcommand} {
    set c [createValidCipher]

    $c configure -stepcommand puts
    set result [$c cget -stepcommand]
    rename $c {}
    
    set result
} {puts}

test grille-3.16 {get default bestfitcommand} {
    set c [createValidCipher]

    set result [$c cget -bestfitcommand]
    rename $c {}
    
    set result
} {}

test grille-3.17 {set/get bestfitcommand (set to null)} {
    set c [createValidCipher]

    $c configure -bestfitcommand {}
    set result [$c cget -bestfitcommand]
    rename $c {}
    
    set result
} {}

test grille-3.18 {set/get bestfitcommand} {
    set c [createValidCipher]

    $c configure -bestfitcommand puts
    set result [$c cget -bestfitcommand]
    rename $c {}
    
    set result
} {puts}

test grille-3.19 {get ptblock (empty)} {
    set c [createValidCipher]

    set result [$c cget -ptblock]
    rename $c {}
    
    set result
} {{                } {                } {                } {                }}

test grille-3.20 {get ptblock} {
    set c [createValidCipher]

    $c restore 1442323131414223 
    set result [$c cget -ptblock]
    rename $c {}
    
    set result
} {{t      h e t    } {   u r       ni } {    n g g      r} { il       l e   }}

test grille-3.21 {get default language} {
    set c [createValidCipher]

    set result [$c cget -language]
    rename $c {}
    
    set result
} {english}

test grille-3.22 {set/get language} {monolingual} {
    set c [createValidCipher]

    $c configure -language german
    set result [$c cget -language]
    rename $c {}
    
    set result
} {german}

test grille-3.23 {set ct returns ciphertext} {
    set c [cipher create grille]
    set result [$c configure -ct abcdefghi]
    rename $c {}

    set result
} {abcdefghi}

test grille-4.1 {substitute} {
    set c [createValidCipher]
    $c substitute 1 1
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {1002000000004003 {t   u   r   e   }}

test grille-4.2 {substitute} {
    set c [createValidCipher]
    $c substitute 1 1
    $c substitute 1 2
    $c substitute 2 1
    $c substitute 2 2
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {1122112244334433 tinrlughltirgeen}

test grille-4.3 {substitute} {
    set c [createValidCipher]
    $c substitute 1 1
    $c substitute 1 1
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {0000000000000000 {                }}

test grille-4.4 {substitute} {
    set c [createValidCipher]
    $c substitute 1 1
    $c substitute 1 4
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {4001000000003002 {u   r   e   t   }}

test grille-4.5 {substitute} {
    set c [createValidCipher]
    $c substitute 1 1
    $c substitute 2 4
    $c substitute 3 2
    $c substitute 3 4
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {1442323131414223 theturninggrille}

test grille-4.6 {substitute with values > 9} {
    set c [cipher create grille -ct [string repeat a 100]]
    $c substitute 10 10
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {3000000004000000000000000000000000000000000000000000000000000000000000000000000000000000002000000001 {a                        a                        a                        a                        }}

test grille-4.7 {substitute in first orientation} {
    set c [createValidCipher]
    $c substitute 1 1 1
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {1002000000004003 {t   u   r   e   }}

test grille-4.8 {substitute in second orientation} {
    set c [createValidCipher]
    $c substitute 1 1 2
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {2003000000001004 {e   t   u   r   }}

test grille-4.9 {substitute in third orientation} {
    set c [createValidCipher]
    $c substitute 1 1 3
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {3004000000002001 {r   e   t   u   }}

test grille-4.10 {substitute in fourth orientation} {
    set c [createValidCipher]
    $c substitute 1 1 4
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {4001000000003002 {u   r   e   t   }}

test grille-4.11 {substitute odd-width cipher in first orientation} {
    set c [cipher create grille -ct abcdefghiklmnopqrstuvwxyz]
    $c substitute 1 1 1
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {1000200000000000000040003 {a     e     z     v     n}}

test grille-4.12 {substitute odd-width cipher in second orientation} {
    set c [cipher create grille -ct abcdefghiklmnopqrstuvwxyz]
    $c substitute 1 1 2
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {2000300000000000000010004 {v     a     e     z     n}}

test grille-4.13 {substitute odd-width cipher in third orientation} {
    set c [cipher create grille -ct abcdefghiklmnopqrstuvwxyz]
    $c substitute 1 1 3
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {3000400000000000000020001 {z     v     a     e     n}}

test grille-4.14 {substitute odd-width cipher in fourth orientation} {
    set c [cipher create grille -ct abcdefghiklmnopqrstuvwxyz]
    $c substitute 1 1 4
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {4000100000000000000030002 {e     z     v     a     n}}


test grille-5.1 {restore} {
    set c [createValidCipher]
    $c restore 1002000000004003 
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {1002000000004003 {t   u   r   e   }}

test grille-5.2 {restore} {
    set c [createValidCipher]
    $c restore 1122112244334433 
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {1122112244334433 tinrlughltirgeen}

test grille-5.3 {restore with a longer cipher} {
    set c [cipher create grille -ct "dhour setth ficeh atita snhit oriuo tanrf afrni cdidu rsuis shhat nilgl lwom"]
    $c restore 1111222211112222111122221112322244414333444433334444333344443333
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {1111222211112222111122221112322244414333444433334444333344443333 dhouthfititatorarsetcehasnhiiotaurniursuhatnlwomnrffcdidisshilgl}

test grille-5.4 {restore with an odd-width cipher} {
    set c [cipher create grille -ct "abcdefghiklmnopqrstuvwxyz"]
    $c restore 2121344112140234332213434
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {2121344112140234332213434 bdhilvackotueprswyfgmqxzn}

test grille-5.5 {restore with an odd-width cipher} {
    set c [cipher create grille -ct "arnuc mrihm eosea greev triii nchga mnapy todoa ernur tiahv teptr lsval acont ceoni inges cagam e"]
    $c restore 134221332212444424234132131431213213132402413134134312313413214242222434411344213
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {134221332212444424234132131431213213132402413134134312313413214242222434411344213 americanyouthplacesmuchmoreimportanceonarrivingatdriverslicenseagethanatvotingage}

test grille-6.1 {solve} {
    set c [createValidCipher]
    $c solve
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {4331212424343112 urninggrillethet}

