# digrafid.test
# Test of the digrafid cipher type

package require cipher

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}

# Helper routine for testing the digrafid cipher
# Laid out, the cipher looks like:
#
# t#guha kogeq# erumsi
#
# Solution:
#
# thisistheforespri
#
# Key:  abcdefghijklmnopqrstuvwxyz# abcdefghijklmnopqrstuvwxyz# 


proc createValidCipher {} {
    set c [cipher create digrafid -ct "t#guhakogeq#erumsi"]

    return $c
}

# Test groups:
#	1.x	Invalid type and number of arguments to cipher command
#	2.x	Invalid range of arguments to cipher command
#       3.x     Valid trivial cipher command usage
#	7.x	Save/Restore tests
#	8.x	Encode tests

test digrafid-1.1 {invalid use of options} {
    set c [createValidCipher]
    set result [catch {$c} msg]
    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar ?option?}}

test digrafid-1.2 {use of invalid option} {
    set c [createValidCipher]
    set result [list [catch {$c configure -foobar 5} msg] $msg]
    rename $c {}
    
    set result
} {1 {Unknown option -foobar}}

test digrafid-1.3 {invalid use of cget} {
    set c [createValidCipher]

    set result [catch {$c cget} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar cget option}}

test digrafid-1.4 {invalid use of cget} {
    set c [createValidCipher]

    set result [catch {$c cget foo} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Unknown option foo}}

test digrafid-1.5 {invalid use of configure} {
    set c [createValidCipher]

    set result [catch {$c configure} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar configure ?option value?}}

test digrafid-1.6 {invalid configure option} {
    set c [createValidCipher]

    set result [catch {$c configure -foo bar} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Unknown option -foo}}

test digrafid-1.7 {invalid use of restore} {
    set c [createValidCipher]

    set result [catch {$c restore} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar restore block1 block2}}

test digrafid-1.8 {invalid use of substitute} {
    set c [createValidCipher]

    set result [catch {$c substitute foo} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {No substitute function defined for digrafid ciphers}}

test digrafid-1.9 {invalid use of undo} {
    set c [createValidCipher]

    set result [catch {$c undo} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar undo ct}}

test digrafid-1.10 {invalid use of locate} {
    set c [createValidCipher]

    set result [catch {$c locate} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar locate pt ct}}

test digrafid-1.11 {invalid use of configure -period} {
    set c [createValidCipher]

    set result [catch {$c configure -period a} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid period setting.}}

test digrafid-1.12 {invalid use digrafid command} {
    set c [createValidCipher]

    set result [catch {$c foo} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Unknown option foo
Must be one of:  ciphervar cget ?option?
                 ciphervar configure ?option value?
                 ciphervar restore block1 block2
                 ciphervar encode pt key}}

test digrafid-2.1 {invalid cipher characters} {
    set c [cipher create digrafid]

    set result [catch {$c configure -ct 1111} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {No valid characters found in ciphertext}}

test digrafid-2.2 {invalid length of restore key} {
    set c [createValidCipher]

    set result [catch {$c restore aabc 12345} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Key 'aabc' has invalid length 4}}

test digrafid-2.3 {invalid character in restore key} {
    set c [createValidCipher]

    set result [catch {$c restore 1abcdefghijklmnopqrstuvwxyz 1abcdefghijklmnopqrstuvwxyz} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid character found in key}}

test digrafid-2.4 {attempt to use solve proc} {
    set c [createValidCipher]

    set result [catch {$c solve} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {You cheat!}}

test digrafid-2.5 {Get plaintext with no ciphertext} {
    set c [cipher create digrafid]

    set result [catch {$c cget -pt} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can't do anything until ciphertext has been set}}

test digrafid-2.6 {Get plaintext with no period} {
    set c [createValidCipher]

    set result [catch {$c cget -pt} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can't do anything until a period has been set}}

test digrafid-2.7 {encode with non-listified key} {
    set c [cipher create digrafid]

    set result [catch {$c encode foobar "abc \{bc"} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {unmatched open brace in list}}

test digrafid-2.8 {Encode with no period} {
    set c [createValidCipher]

    set result [catch {$c encode foobar {abcdefghijklmnopqrstuvwxyz# abcdefghijklmnopqrstuvwxyz#}} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can not encode digrafid until a period has been set.}}

test digrafid-2.9 {Encode invalid number of key elements} {
    set c [createValidCipher]
    $c configure -period 5

    set result [catch {$c encode foobar "a b c"} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid number of items in encoding key 'a b c'.  Should have found 2.}}

test digrafid-2.10 {Encode with invalid key length} {
    set c [createValidCipher]
    $c configure -period 5

    set result [catch {$c encode foobar "ab abcdefghijklmnopqrstuvwxyz#"} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid length of key elements.}}

test digrafid-2.11 {Encode with invalid key length} {
    set c [createValidCipher]
    $c configure -period 5

    set result [catch {$c encode foobar "abcdefghijklmnopqrstuvwxyz# cd"} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid length of key elements.}}

test digrafid-3.1 {use of cget -length} {
    set c [cipher create digrafid]
    set result [list [$c cget -length]]
   rename $c {}
    
    set result
} {0}

test digrafid-3.2 {use of cget -length} {
    set c [createValidCipher]
    set result [list [$c cget -length]]
   rename $c {}
    
    set result
} {18}

test digrafid-3.3 {use of cget -period} {
    set c [createValidCipher]
    $c configure -period 6
    set result [list [$c cget -period]]
    rename $c {}
    
    set result
} {6}

test digrafid-3.4 {use of cget -ct} {
    set c [cipher create digrafid]
    set result [$c cget -ct]
    rename $c {}
    
    set result
} {{}}

test digrafid-3.5 {use of cget -ct} {
    set c [createValidCipher]
    set result [$c cget -ct]
    rename $c {}
    
    set result
} {t#guhakogeq#erumsi}

test digrafid-3.6 {set ciphertext with uppercase letters} {
    set c [cipher create digrafid -ct "Abcde Fghij Klmno"]
    set result [$c cget -ct]
    rename $c {}
    
    set result
} {abcdefghijklmno}

test digrafid-3.7 {use of cget -dt with odd period} {
    set c [createValidCipher]
    $c configure -period 3
    set result [$c cget -dt]
    rename $c {}
    
    set result
} {000000000000000000000000000}

test digrafid-3.8 {use of cget -dt with even period} {
    set c [createValidCipher]
    $c configure -period 4
    set result [$c cget -dt]
    rename $c {}
    
    set result
} {000000000000000000000000000}

test digrafid-3.9 {use of cget -pt with odd period} {
    set c [createValidCipher]
    $c configure -period 3
    set result [$c cget -pt]
    rename $c {}
    
    set result
} {                  }

test digrafid-3.10 {use of cget -pt with even period} {
    set c [createValidCipher]
    $c configure -period 4
    set result [$c cget -pt]
    rename $c {}
    
    set result
} {                  }

test digrafid-3.11 {use of cget -key} {
    set c [createValidCipher]
    set result [list [string length [lindex [$c cget -key] 0]] [string length [lindex [$c cget -key] 1]] [$c cget -key]]
    rename $c {}
    
    set result
} {27 27 {{                           } {                           }}}

test digrafid-3.12 {use of cget -type} {
    set c [createValidCipher]
    set result [$c cget -type]
    rename $c {}
    
    set result
} {digrafid}

test digrafid-3.13 {use of undo} {unimplemented} {
    set c [createValidCipher]
    $c substitute abcdefghij bcdefghijk
    $c undo abc
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {}

test digrafid-3.14 {get default language} {
    set c [createValidCipher]

    set result [$c cget -language]
    rename $c {}
    
    set result
} {english}

test digrafid-3.15 {set/get language} {monolingual} {
    set c [createValidCipher]

    $c configure -language german
    set result [$c cget -language]
    rename $c {}
    
    set result
} {german}

test digrafid-3.16 {set ct returns ciphertext} {
    set c [cipher create digrafid]
    set result [$c configure -ct abcdefg]
    rename $c {}

    set result
} {abcdefg}

test digrafid-7.1 {restore test} {} {
    set c [createValidCipher]
    $c configure -period 3
    $c restore abcdefghijklmnopqrstuvwxyz# abcdefghijklmnopqrstuvwxyz# 
    set result [list [$c cget -key] [$c cget -dt] [$c cget -pt]]
    rename $c {}
    
    set result
} {{abcdefghijklmnopqrstuvwxyz# abcdefghijklmnopqrstuvwxyz#} 299733811256715869529384179 thisistheforestpri}

test digrafid-7.2 {save/restore test, empty key} {unsupported} {
    set c1 [createValidCipher]
    $c1 configure -period 3
    set key [$c1 cget -key]
    set c2 [createValidCipher]
    $c2 configure -period 3
    $c2 restore [lindex $key 0] [lindex $key 1]
    set result [list [$c2 cget -key] [$c2 cget -pt]]
    rename $c1 {}
    rename $c2 {}
    
    set result
} {{{                                                      } {                                                      }} {                  }}

test digrafid-7.3 {save/restore test, full key} {} {
    set c1 [createValidCipher]
    $c1 configure -period 3
    $c1 restore abcdefghijklmnopqrstuvwxyz# abcdefghijklmnopqrstuvwxyz# 
    set key [$c1 cget -key]
    set c2 [createValidCipher]
    $c2 configure -period 3
    $c2 restore [lindex $key 0] [lindex $key 1]
    set result [list [$c2 cget -key] [$c2 cget -pt]]
    rename $c1 {}
    rename $c2 {}
    
    set result
} {{abcdefghijklmnopqrstuvwxyz# abcdefghijklmnopqrstuvwxyz#} thisistheforestpri}

test digrafid-7.4 {save/restore test, key with spaces} {unimplemented} {
    set c1 [createValidCipher]
    $c1 configure -period 3
    $c restore {abcdefghijklmnopqrs uvwxyz#} {abcdefghijklmnopqr tuvwxyz#}
    set key [$c1 cget -key]
    set c2 [createValidCipher]
    $c2 configure -period 3
    $c2 restore [lindex $key 0] [lindex $key 1]
    set result [list [$c2 cget -key] [$c2 cget -pt]]
    rename $c1 {}
    rename $c2 {}
    
    set result
} {{abcdefghijklmnopqrstuvwxyz# abcdefghijklmnopqrstuvwxyz#} thisistheforestpri}

test digrafid-7.5 {multiple restores succeed} {
    set c [createValidCipher]
    $c configure -period 3
    $c restore #jextraklmpohwzqdgvusifcbyn #jextraklmpohwzqdgvusifcbyn
    $c restore abcdefghijklmnopqrstuvwxyz# abcdefghijklmnopqrstuvwxyz# 
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}
    
    set result
} {{abcdefghijklmnopqrstuvwxyz# abcdefghijklmnopqrstuvwxyz#} thisistheforestpri}

test digrafid-7.6 {restore with incomplete final block} {
    set c [cipher create digrafid -ciphertext "epwkmrotla lgavyfcxcs msgnbagcby lagnacanne joysinrnxa jdttmmsgmq usdllclopa djenoqrvso hlrqwdrfhl go#mjqscsr gcpauoxfkg hravefdtqr vjgcsg" -period 5]
    $c restore bosnacdefghijklmpqrtuvwxyz# gqebicjhwkfrynopamsdxvluzt#
    set result [list [$c cget -key] [$c cget -dt] [$c cget -pt]]
    rename $c {}
    
    set result
} {{bosnacdefghijklmpqrtuvwxyz# gqebicjhwkfrynopamsdxvluzt#} 827581753238658641534782633631761155128146124658155516525413456791355185688462298759311742391735646656858717825212194326265172592182265156989442316323146858386682541253534822738953477146311 eethmoalealeveroarismyccbkrfablfknebgskrnhallomafhvkxghptvfdinqughmlitmmbydeefocoalfwdbodirskcleffexrandxnpvkshewasmanuenemgms}

test digrafid-9.1 {encode} {
    set c [cipher create digrafid -period 4]
    set result [list [$c encode "this is the forest pri" {abcdefghijklmnopqrstuvwxyz# abcdefghijklmnopqrstuvwxyz#}]]
    lappend result [$c cget -ct] [$c cget -pt] [$c cget -keyword]
    rename $c {}

    set result
} {t#tcuhahnwbeuoigri t#tcuhahnwbeuoigri thisistheforestpri {abcdefghijklmnopqrstuvwxyz# abcdefghijklmnopqrstuvwxyz#}}
