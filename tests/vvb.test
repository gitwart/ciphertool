# vvb.test
# Test of the vigenere, variant, beaufort, porta, gronsfeld cipher types

package require cipher

if {[lsearch [namespace children] ::tcltest] == -1} {
    source [file join [pwd] [file dirname [info script]] defs.tcl]
}

# Helper routine for testing the vigenere cipher
# Laid out, the cipher looks like:
#
#
# Solutions:
#
# Vigenere (8) (periodic):
#	accordingtoelcythevigenerecipherwasfirstusedinfifteenhundredandeightysix
# Variant (5) (apple):
#	cequalspminusk
# Beaufort (8) (previous):
#	inregardtosecretmessagesthereareallsortsofwaysofsendingthembutaprivatearrangementmustbepreviouslymadebetweenthesenderandthereceiver
# Porta (8) (camqcame qnsiqnst):
#	themoonhesswungaweyfromtheiarthtoitomostdistentpointsmncetheyeerseventeinfiftyafiatthatwowtberepeapeduntilayproximatilytheyeantwentyonihundred
# Gronsfeld (7) (9321492):
#	thisoneusestenofthetwentysixvigenerealphabets
#


proc createValidCipher {type} {
    switch $type {
	vigenere {
	set c [cipher create vigenere -ct "pgtwf gqpvxfmzfgvwimquhvggitqdkmtlejnwuavjwvlwqnkuxvmbkcpsvvloqlgxkybmvqz"]
	}
	variant {
	    set c [cipher create variant -ct "cpbjw ldabenfdz"]
	}
	beaufort {
	    set c [cipher create beaufort -ct "henrc odpwdmrgxqzdnmdiiqawkaeeodopgtduxbabmivkwgnxnrsabozinsuovudyjjvpkubyrrpecqfwfkdpnqdynjnuuchrfesenqztnaiphqalebrrohpwkaeemqkunn"]
	}
	porta {
	    set c [cipher create porta -ct "pqxej fvegymnynyiufrdsgvrilpsgztmesirknyigperwgrrndlojntyidxotycipcrevcesgoirlisirzqeucgltcixhyixhelekyjekpxieyrrslhdlifygprjgsdice"]
	}
	gronsfeld {
	    set c [cipher create gronsfeld -ct "ckkts wgdvgtxnpxiviicynqvzwrzelifrntndnqljdnwu"]
	}
    }

    return $c
}

# Test groups:
#	1.x	Invalid type and number of arguments to cipher command
#	2.x	Invalid range of arguments to cipher command
#       3.x     Valid trivial cipher command usage
#       4.x     Substitution tests
#       5.x     Undo tests
#       6.x     Solve tests
#       7.x     Fit tests
#       8.x     Locate tip tests

test vigenere-1.1 {invalid use of options} {
    set c [createValidCipher vigenere]
    set result [catch {$c} msg]
    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar ?option?}}

test vigenere-1.2 {use of invalid option} {
    set c [createValidCipher vigenere]
    set result [list [catch {$c configure -foo 5} msg] $msg]
    rename $c {}
    
    set result
} {1 {Unknown option -foo}}

test vigenere-1.3 {invalid use of cget} {
    set c [createValidCipher vigenere]

    set result [catch {$c cget} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar cget option}}

test vigenere-1.4 {invalid use of cget} {
    set c [createValidCipher vigenere]

    set result [catch {$c cget foo} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Unknown option foo}}

test vigenere-1.5 {invalid use of configure} {
    set c [createValidCipher vigenere]

    set result [catch {$c configure} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar configure ?option value?}}

test vigenere-1.6 {invalid configure option} {
    set c [createValidCipher vigenere]

    set result [catch {$c configure -foo bar} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Unknown option -foo}}

test vigenere-1.7 {invalid use of restore} {
    set c [createValidCipher vigenere]

    set result [catch {$c restore} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar restore ct pt}}

test vigenere-1.8 {invalid use of substitute} {
    set c [createValidCipher vigenere]

    set result [catch {$c substitute foo} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar substitute ct pt offset}}

test vigenere-1.9 {invalid use of substitute} {
    set c [createValidCipher vigenere]

    set result [catch {$c substitute foo bar a} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Bad column number:  a}}

test vigenere-1.10 {invalid use of substitute} {
    set c [createValidCipher vigenere]

    set result [catch {$c substitute foo b a} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {ciphertext and plaintext must be the same length}}

test vigenere-1.11 {invalid use of undo} {
    set c [createValidCipher vigenere]

    set result [catch {$c undo} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar undo col}}

test vigenere-1.12 {invalid use of undo} {
    set c [createValidCipher vigenere]

    set result [catch {$c undo a} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Bad column number:  a}}

test vigenere-1.13 {invalid use of locatebest} {
    set c [createValidCipher vigenere]

    set result [catch {$c locatebest} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar locatebest tip}}

test vigenere-1.14 {invalid use of locate} {
    set c [createValidCipher vigenere]

    set result [catch {$c locate} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar locate pt ct}}

test vigenere-1.15 {invalid use of configure -stepinterval} {
    set c [createValidCipher vigenere]

    set result [catch {$c configure -stepinterval a} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid interval.}}

test vigenere-1.16 {invalid use of configure -stepinterval} {
    set c [createValidCipher vigenere]

    set result [catch {$c configure -stepinterval -1} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid interval.}}

test vigenere-1.17 {invalid use of fit} {
    set c [createValidCipher vigenere]

    set result [catch {$c fit} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar fit col}}

test vigenere-1.18 {invalid use of fit} {
    set c [createValidCipher vigenere]
    $c configure -period 4

    set result [catch {$c fit a} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Bad column value:  a}}

test vigenere-1.19 {invalid use of encode} {
    set c [cipher create vigenere]

    set result [catch {$c encode} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Usage:  ciphervar encode pt key}}

test vigenere-1.20 {invalid use vigenere command} {
    set c [createValidCipher vigenere]

    set result [catch {$c foo} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Unknown option foo
Must be one of:  ciphervar cget ?option?
                 ciphervar configure ?option value?
                 ciphervar solve
                 ciphervar substitute ct pt col
                 ciphervar locate ct pt
                 ciphervar locatebest tip
                 ciphervar undo ct
                 ciphervar encode pt key}}

test vigenere-2.1 {invalid cipher characters} {
    set c [cipher create vigenere]

    set result [catch {$c configure -ct 1111} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {No valid characters found in ciphertext}}

test vigenere-2.2 {invalid period value} {
    set c [createValidCipher vigenere]
    set result [catch {$c configure -period a} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Bad period.  Integer expected:  a}}

test vigenere-2.3 {invalid period value} {
    set c [createValidCipher vigenere]
    set result [catch {$c configure -period 0} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Bad period for cipher:  0}}

test vigenere-2.4 {substitution with no period set} {
    set c [createValidCipher vigenere]
    set result [catch {$c substitute a a 1} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Period must be set before performing substitutions}}

test vigenere-2.5 {bad vigenere substitution} {
    set c [createValidCipher vigenere]
    $c configure -period 4
    set result [catch {$c substitute aaaaa aaaab 1} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Bad substitution}}

test vigenere-2.6 {bad variant substitution} {
    set c [createValidCipher variant]
    $c configure -period 4
    set result [catch {$c substitute aaaaa aaaab 1} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Bad substitution}}

test vigenere-2.7 {bad beaufort substitution} {
    set c [createValidCipher beaufort]
    $c configure -period 4
    set result [catch {$c substitute aaaaa aaaab 1} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Bad substitution}}

test vigenere-2.8 {bad porta substitution} {
    set c [createValidCipher porta]
    $c configure -period 4
    set result [catch {$c substitute aaaaa aaaab 1} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Bad substitution}}

test vigenere-2.9 {bad substitution offset} {
    set c [createValidCipher porta]
    $c configure -period 4
    set result [catch {$c substitute aaaa aaaa 0} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid offset.  Must be from 1 to period}}

test vigenere-2.10 {bad substitution offset} {
    set c [createValidCipher porta]
    $c configure -period 4
    set result [catch {$c substitute aaaa aaaa 8} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid offset.  Must be from 1 to period}}

test vigenere-2.11 {bad gronsfeld substitution} {
    set c [createValidCipher gronsfeld]
    $c configure -period 4
    set result [catch {$c substitute aaaaa aaaab 1} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Bad substitution}}

test vigenere-2.12 {bad vigenere restore} {
    set c [createValidCipher vigenere]
    $c configure -period 4
    set result [catch {$c restore aaaaa aaaab} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Bad substitution}}

test vigenere-2.13 {bad variant restore} {
    set c [createValidCipher variant]
    $c configure -period 4
    set result [catch {$c restore aaaaa aaaab} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Bad substitution}}

test vigenere-2.14 {bad beaufort restore} {
    set c [createValidCipher beaufort]
    $c configure -period 4
    set result [catch {$c restore aaaaa aaaab} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Bad substitution}}

test vigenere-2.15 {bad porta restore} {
    set c [createValidCipher porta]
    $c configure -period 4
    set result [catch {$c restore aaaaa aaaab} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Bad substitution}}

test vigenere-2.16 {bad gronsfeld restore} {
    set c [createValidCipher gronsfeld]
    $c configure -period 4
    set result [catch {$c restore aaaaa aaaab} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Bad substitution}}

test vigenere-2.17 {bad solve} {
    set c [createValidCipher vigenere]
    set result [catch {$c solve} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can't solve this cipher until a period has been set}}

test vigenere-2.18 {get plaintext with no period} {
    set c [createValidCipher vigenere]
    set result [catch {$c cget -pt} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can't produce plaintext without a period}}

test vigenere-2.19 {bad solve method} {
    set c [createValidCipher vigenere]
    set result [catch {$c configure -solvemethod foo} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid solve algorithm.  Must be one of 'fast' or 'thorough'}}

test vigenere-2.20 {invalid use of fit} {
    set c [createValidCipher vigenere]
    $c configure -period 4

    set result [catch {$c fit 0} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Bad column index}}

test vigenere-2.21 {invalid use of fit} {
    set c [createValidCipher vigenere]
    $c configure -period 4

    set result [catch {$c fit 5} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Bad column index}}

test vigenere-2.22 {invalid use of fit, no period} {
    set c [createValidCipher vigenere]

    set result [catch {$c fit 5} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can't fit columns until a period has been set}}

test vigenere-2.23 {invalid use of fit, no ciphertext} {
    set c [cipher create vigenere -period 5]

    set result [catch {$c fit 5} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Can't fit columns until ciphertext has been set}}

test vigenere-2.24 {encode with non-listified key} {
    set c [cipher create vigenere]

    set result [catch {$c encode foobar "abc \{bc"} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {unmatched open brace in list}}

test vigenere-2.25 {encode with too many key elements} {
    set c [cipher create vigenere]

    set result [catch {$c encode foobar "a b c"} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid number of items in encoding key 'a b c'.  Should have found 2.}}

test vigenere-2.26 {encode with short key elements} {
    set c [cipher create vigenere]

    set result [catch {$c encode foobar {"" ""}} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Length of key elements can not be zero.}}

test vigenere-2.27 {encode with mismatched key elements} {
    set c [cipher create vigenere]

    set result [catch {$c encode foobar {abc ab}} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Length of key elements must match.}}

test vigenere-2.28 {encode gronsfeld with invalid pt character} {
    set c [cipher create gronsfeld -period 3]

    set result [catch {$c encode f?oobar {abc abc}} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid character found in plaintext at position '?oobar'}}

test vigenere-2.29 {encode gronsfeld with invalid key character} {
    set c [cipher create gronsfeld -period 3]

    set result [catch {$c encode foobar {a?c abc}} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid character in key 'a?c'}}

test vigenere-2.30 {encode gronsfeld with invalid key character} {
    set c [cipher create gronsfeld -period 3]

    set result [catch {$c encode foobar {abc a?c}} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid character in key 'a?c'}}

test vigenere-2.31 {encode gronsfeld with invalid substitution} {
    set c [cipher create gronsfeld -period 3]

    set result [catch {$c encode foobar {abc bcd}} msg]

    regsub -all $c $msg ciphervar msg
    lappend result $msg
    rename $c {}
    
    set result
} {1 {Invalid gronsfeld substitution.}}

test vigenere-3.1 {use of cget -length} {
    set c [cipher create vigenere]
    set result [list [$c cget -length]]
   rename $c {}
    
    set result
} {0}

test vigenere-3.2 {use of cget -length} {
    set c [createValidCipher vigenere]
    set result [list [$c cget -length]]
   rename $c {}
    
    set result
} {72}

test vigenere-3.3 {use of cget -period} {
    set c [createValidCipher vigenere]
    set result [list [$c cget -period]]
    rename $c {}
    
    set result
} {0}

test vigenere-3.4 {use of cget -period} {
    set c [createValidCipher vigenere]
    $c configure -period 4
    set result [list [$c cget -period]]
    rename $c {}
    
    set result
} {4}

test vigenere-3.5 {use of cget -ct} {
    set c [cipher create vigenere]
    set result [$c cget -ct]
    rename $c {}
    
    set result
} {{}}

test vigenere-3.6 {use of cget -ct} {
    set c [createValidCipher vigenere]
    set result [$c cget -ct]
    rename $c {}
    
    set result
} {pgtwfgqpvxfmzfgvwimquhvggitqdkmtlejnwuavjwvlwqnkuxvmbkcpsvvloqlgxkybmvqz}

test vigenere-3.7 {set ciphertext with uppercase letters} {
    set c [cipher create vigenere -ct "Abcde Fghij Klmno"]
    set result [$c cget -ct]
    rename $c {}
    
    set result
} {abcdefghijklmno}

test vigenere-3.8 {use of vigenere cget -pt (empty)} {
    set c [createValidCipher vigenere]
    $c configure -period 4
    set result [$c cget -pt]
    rename $c {}
    
    set result
} {                                                                        }

test vigenere-3.9 {use of variant cget -pt (empty)} {
    set c [createValidCipher variant]
    $c configure -period 4
    set result [$c cget -pt]
    rename $c {}
    
    set result
} {              }

test vigenere-3.10 {use of beaufort cget -pt (empty)} {
    set c [createValidCipher beaufort]
    $c configure -period 4
    set result [$c cget -pt]
    rename $c {}
    
    set result
} {                                                                                                                                   }

test vigenere-3.11 {use of porta cget -pt (empty)} {
    set c [createValidCipher porta]
    $c configure -period 4
    set result [$c cget -pt]
    rename $c {}
    
    set result
} {                                                                                                                                  }

test vigenere-3.12 {use of gronsfeld cget -pt (empty)} {
    set c [createValidCipher gronsfeld]
    $c configure -period 4
    set result [$c cget -pt]
    rename $c {}
    
    set result
} {                                             }

test vigenere-3.13 {use of vigenere cget -keyword (empty)} {
    set c [createValidCipher vigenere]
    set result [$c cget -keyword]
    rename $c {}
    
    set result
} {{}}

test vigenere-3.14 {use of variant cget -keyword (empty)} {
    set c [createValidCipher variant]
    set result [$c cget -keyword]
    rename $c {}
    
    set result
} {{}}

test vigenere-3.15 {use of beaufort cget -keyword (empty)} {
    set c [createValidCipher beaufort]
    set result [$c cget -keyword]
    rename $c {}
    
    set result
} {{}}

test vigenere-3.16 {use of porta cget -keyword (empty)} {
    set c [createValidCipher porta]
    set result [$c cget -keyword]
    rename $c {}
    
    set result
} {{} {}}

test vigenere-3.17 {use of gronsfeld cget -keyword (empty)} {
    set c [createValidCipher gronsfeld]
    set result [$c cget -keyword]
    rename $c {}
    
    set result
} {{}}

test vigenere-3.18 {use of vigenere cget -keyword (nosubs)} {
    set c [createValidCipher vigenere]
    $c configure -period 4
    set result [$c cget -keyword]
    rename $c {}
    
    set result
} {{    }}

test vigenere-3.19 {use of variant cget -keyword (nosubs)} {
    set c [createValidCipher variant]
    $c configure -period 4
    set result [$c cget -keyword]
    rename $c {}
    
    set result
} {{    }}

test vigenere-3.20 {use of beaufort cget -keyword (nosubs)} {
    set c [createValidCipher beaufort]
    $c configure -period 4
    set result [$c cget -keyword]
    rename $c {}
    
    set result
} {{    }}

test vigenere-3.21 {use of porta cget -keyword (nosubs)} {
    set c [createValidCipher porta]
    $c configure -period 4
    set result [$c cget -keyword]
    rename $c {}
    
    set result
} {{    } {    }}

test vigenere-3.22 {use of gronsfeld cget -keyword (nosubs)} {
    set c [createValidCipher gronsfeld]
    $c configure -period 4
    set result [$c cget -keyword]
    rename $c {}
    
    set result
} {{    }}

test vigenere-3.23 {use of vigenere cget -keyword} {
    set c [createValidCipher vigenere]
    $c configure -period 4
    $c substitute aaaa bbbb 1
    set result [$c cget -keyword]
    rename $c {}
    
    set result
} {zzzz}

test vigenere-3.24 {use of variant cget -keyword} {
    set c [createValidCipher variant]
    $c configure -period 4
    $c substitute aaaa bbbb 1
    set result [$c cget -keyword]
    rename $c {}
    
    set result
} {bbbb}

test vigenere-3.25 {use of beaufort cget -keyword} {
    set c [createValidCipher beaufort]
    $c configure -period 4
    $c substitute aaaa bbbb 1
    set result [$c cget -keyword]
    rename $c {}
    
    set result
} {bbbb}

test vigenere-3.26 {use of porta cget -keyword} {
    set c [createValidCipher porta]
    $c configure -period 4
    $c substitute aaaa nnnn 1
    set result [$c cget -keyword]
    rename $c {}
    
    set result
} {aaaa bbbb}

test vigenere-3.27 {use of gronsfeld cget -keyword} {
    set c [createValidCipher gronsfeld]
    $c configure -period 4
    $c substitute aaaa zzzz 1
    set result [$c cget -keyword]
    rename $c {}
    
    set result
} {1111}

test vigenere-3.28 {use of vigenere cget -key (empty)} {
    set c [createValidCipher vigenere]
    set result [$c cget -key]
    rename $c {}
    
    set result
} {{} {}}

test vigenere-3.29 {use of variant cget -key (empty)} {
    set c [createValidCipher variant]
    set result [$c cget -key]
    rename $c {}
    
    set result
} {{} {}}

test vigenere-3.30 {use of beaufort cget -key (empty)} {
    set c [createValidCipher beaufort]
    set result [$c cget -key]
    rename $c {}
    
    set result
} {{} {}}

test vigenere-3.31 {use of porta cget -key (empty)} {
    set c [createValidCipher porta]
    set result [$c cget -key]
    rename $c {}
    
    set result
} {{} {}}

test vigenere-3.32 {use of gronsfeld cget -key (empty)} {
    set c [createValidCipher gronsfeld]
    set result [$c cget -key]
    rename $c {}
    
    set result
} {{} {}}

test vigenere-3.33 {use of vigenere cget -key (nosubs)} {
    set c [createValidCipher vigenere]
    $c configure -period 4
    set result [$c cget -key]
    rename $c {}
    
    set result
} {{    } aaaa}

test vigenere-3.34 {use of variant cget -key (nosubs)} {
    set c [createValidCipher variant]
    $c configure -period 4
    set result [$c cget -key]
    rename $c {}
    
    set result
} {aaaa {    }}

test vigenere-3.35 {use of beaufort cget -key (nosubs)} {
    set c [createValidCipher beaufort]
    $c configure -period 4
    set result [$c cget -key]
    rename $c {}
    
    set result
} {aaaa {    }}

test vigenere-3.36 {use of porta cget -key (nosubs)} {
    set c [createValidCipher porta]
    $c configure -period 4
    set result [$c cget -key]
    rename $c {}
    
    set result
} {{    } aaaa}

test vigenere-3.37 {use of gronsfeld cget -key (nosubs)} {
    set c [createValidCipher gronsfeld]
    $c configure -period 4
    set result [$c cget -key]
    rename $c {}
    
    set result
} {{    } aaaa}

test vigenere-3.38 {use of vigenere cget -key} {
    set c [createValidCipher vigenere]
    $c configure -period 4
    $c substitute aaaa bbbb 1
    set result [$c cget -key]
    rename $c {}
    
    set result
} {zzzz aaaa}

test vigenere-3.39 {use of variant cget -key} {
    set c [createValidCipher variant]
    $c configure -period 4
    $c substitute aaaa bbbb 1
    set result [$c cget -key]
    rename $c {}
    
    set result
} {aaaa bbbb}

test vigenere-3.40 {use of beaufort cget -key} {
    set c [createValidCipher beaufort]
    $c configure -period 4
    $c substitute aaaa bbbb 1
    set result [$c cget -key]
    rename $c {}
    
    set result
} {aaaa bbbb}

test vigenere-3.41 {use of porta cget -key} {
    set c [createValidCipher porta]
    $c configure -period 4
    $c substitute aaaa nnnn 1
    set result [$c cget -key]
    rename $c {}
    
    set result
} {aaaa nnnn}

test vigenere-3.42 {use of gronsfeld cget -key} {
    set c [createValidCipher gronsfeld]
    $c configure -period 4
    $c substitute aaaa zzzz 1
    set result [$c cget -key]
    rename $c {}
    
    set result
} {bbbb aaaa}

test vigenere-3.43 {use of vigenere cget -type} {
    set c [createValidCipher vigenere]
    set result [$c cget -type]
    rename $c {}
    
    set result
} {vigenere}

test vigenere-3.44 {use of variant cget -type} {
    set c [createValidCipher variant]
    set result [$c cget -type]
    rename $c {}
    
    set result
} {variant}

test vigenere-3.45 {use of beaufort cget -type} {
    set c [createValidCipher beaufort]
    set result [$c cget -type]
    rename $c {}
    
    set result
} {beaufort}

test vigenere-3.46 {use of porta cget -type} {
    set c [createValidCipher porta]
    set result [$c cget -type]
    rename $c {}
    
    set result
} {porta}

test vigenere-3.47 {use of gronsfeld cget -type} {
    set c [createValidCipher gronsfeld]
    set result [$c cget -type]
    rename $c {}
    
    set result
} {gronsfeld}

test vigenere-3.48 {use of vigenere restore} {
    set c [createValidCipher vigenere]
    $c configure -period 4
    $c restore aaaa bbbb
    set result [$c cget -key]
    rename $c {}
    
    set result
} {zzzz aaaa}

test vigenere-3.49 {use of variant restore} {
    set c [createValidCipher variant]
    $c configure -period 4
    $c restore aaaa bbbb
    set result [$c cget -key]
    rename $c {}
    
    set result
} {aaaa bbbb}

test vigenere-3.50 {use of beaufort restore} {
    set c [createValidCipher beaufort]
    $c configure -period 4
    $c restore aaaa bbbb
    set result [$c cget -key]
    rename $c {}
    
    set result
} {aaaa bbbb}

test vigenere-3.51 {use of porta restore} {
    set c [createValidCipher porta]
    $c configure -period 4
    $c restore aaaa nnnn
    set result [$c cget -key]
    rename $c {}
    
    set result
} {aaaa nnnn}

test vigenere-3.52 {use of gronsfeld restore} {
    set c [createValidCipher gronsfeld]
    $c configure -period 4
    $c restore aaaa zzzz
    set result [$c cget -key]
    rename $c {}
    
    set result
} {bbbb aaaa}

test vigenere-3.53 {get default solve method type} {
    set c [createValidCipher vigenere]
    set result [$c cget -solvemethod]
    rename $c {}
    
    set result
} {fast}

test vigenere-3.54 {get default solve method type} {
    set c [createValidCipher vigenere]
    $c configure -solvemethod fast
    set result [$c cget -solvemethod]
    rename $c {}
    
    set result
} {fast}

test vigenere-3.55 {get default solve method type} {
    set c [createValidCipher vigenere]
    $c configure -solvemethod thorough
    set result [$c cget -solvemethod]
    rename $c {}
    
    set result
} {thorough}

test vigenere-3.56 {get default stepinterval} {
    set c [createValidCipher vigenere]

    set result [$c cget -stepinterval]
    rename $c {}
    
    set result
} {0}

test vigenere-3.57 {set/get stepinterval (set to 0)} {
    set c [createValidCipher vigenere]

    $c configure -stepinterval 0
    set result [$c cget -stepinterval]
    rename $c {}
    
    set result
} {0}

test vigenere-3.58 {set/get stepinterval} {
    set c [createValidCipher vigenere]

    $c configure -stepinterval 10000
    set result [$c cget -stepinterval]
    rename $c {}
    
    set result
} {10000}

test vigenere-3.59 {get default stepcommand} {
    set c [createValidCipher vigenere]

    set result [$c cget -stepcommand]
    rename $c {}
    
    set result
} {}

test vigenere-3.60 {set/get stepcommand (set to null)} {
    set c [createValidCipher vigenere]

    $c configure -stepcommand {}
    set result [$c cget -stepcommand]
    rename $c {}
    
    set result
} {}

test vigenere-3.61 {set/get stepcommand} {
    set c [createValidCipher vigenere]

    $c configure -stepcommand puts
    set result [$c cget -stepcommand]
    rename $c {}
    
    set result
} {puts}

test vigenere-3.62 {get default bestfitcommand} {
    set c [createValidCipher vigenere]

    set result [$c cget -bestfitcommand]
    rename $c {}
    
    set result
} {}

test vigenere-3.63 {set/get bestfitcommand (set to null)} {
    set c [createValidCipher vigenere]

    $c configure -bestfitcommand {}
    set result [$c cget -bestfitcommand]
    rename $c {}
    
    set result
} {}

test vigenere-3.64 {set/get bestfitcommand} {
    set c [createValidCipher vigenere]

    $c configure -bestfitcommand puts
    set result [$c cget -bestfitcommand]
    rename $c {}
    
    set result
} {puts}

test vigenere-3.65 {get default language} {
    set c [createValidCipher vigenere]

    set result [$c cget -language]
    rename $c {}
    
    set result
} {english}

test vigenere-3.66 {set/get language} {monolingual} {
    set c [createValidCipher vigenere]

    $c configure -language german
    set result [$c cget -language]
    rename $c {}
    
    set result
} {german}


test vigenere-3.67 {set ct returns ciphertext} {
    set c [cipher create vigenere]
    set result [$c configure -ct abcdefg]
    rename $c {}

    set result
} {abcdefg}
#
# To test the various substitution routines we need to construct
# a giant 26x26 table for each cipher type and check all cells in the
# table.
#

set alphabetBlock    {aaaaaaaaaaaaaaaaaaaaaaaaaa}
append alphabetBlock {bbbbbbbbbbbbbbbbbbbbbbbbbb}
append alphabetBlock {cccccccccccccccccccccccccc}
append alphabetBlock {dddddddddddddddddddddddddd}
append alphabetBlock {eeeeeeeeeeeeeeeeeeeeeeeeee}
append alphabetBlock {ffffffffffffffffffffffffff}
append alphabetBlock {gggggggggggggggggggggggggg}
append alphabetBlock {hhhhhhhhhhhhhhhhhhhhhhhhhh}
append alphabetBlock {iiiiiiiiiiiiiiiiiiiiiiiiii}
append alphabetBlock {jjjjjjjjjjjjjjjjjjjjjjjjjj}
append alphabetBlock {kkkkkkkkkkkkkkkkkkkkkkkkkk}
append alphabetBlock {llllllllllllllllllllllllll}
append alphabetBlock {mmmmmmmmmmmmmmmmmmmmmmmmmm}
append alphabetBlock {nnnnnnnnnnnnnnnnnnnnnnnnnn}
append alphabetBlock {oooooooooooooooooooooooooo}
append alphabetBlock {pppppppppppppppppppppppppp}
append alphabetBlock {qqqqqqqqqqqqqqqqqqqqqqqqqq}
append alphabetBlock {rrrrrrrrrrrrrrrrrrrrrrrrrr}
append alphabetBlock {ssssssssssssssssssssssssss}
append alphabetBlock {tttttttttttttttttttttttttt}
append alphabetBlock {uuuuuuuuuuuuuuuuuuuuuuuuuu}
append alphabetBlock {vvvvvvvvvvvvvvvvvvvvvvvvvv}
append alphabetBlock {wwwwwwwwwwwwwwwwwwwwwwwwww}
append alphabetBlock {xxxxxxxxxxxxxxxxxxxxxxxxxx}
append alphabetBlock {yyyyyyyyyyyyyyyyyyyyyyyyyy}
append alphabetBlock {zzzzzzzzzzzzzzzzzzzzzzzzzz}

test vigenere-4.1 {vigenere substitutions} {
    set c [cipher create vigenere -ct "$alphabetBlock" -period 26]
    $c sub aaaaaaaaaaaaaaaaaaaaaaaaaa abcdefghijklmnopqrstuvwxyz 1
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}

    set result
} {{azyxwvutsrqponmlkjihgfedcb aaaaaaaaaaaaaaaaaaaaaaaaaa} abcdefghijklmnopqrstuvwxyzbcdefghijklmnopqrstuvwxyzacdefghijklmnopqrstuvwxyzabdefghijklmnopqrstuvwxyzabcefghijklmnopqrstuvwxyzabcdfghijklmnopqrstuvwxyzabcdeghijklmnopqrstuvwxyzabcdefhijklmnopqrstuvwxyzabcdefgijklmnopqrstuvwxyzabcdefghjklmnopqrstuvwxyzabcdefghiklmnopqrstuvwxyzabcdefghijlmnopqrstuvwxyzabcdefghijkmnopqrstuvwxyzabcdefghijklnopqrstuvwxyzabcdefghijklmopqrstuvwxyzabcdefghijklmnpqrstuvwxyzabcdefghijklmnoqrstuvwxyzabcdefghijklmnoprstuvwxyzabcdefghijklmnopqstuvwxyzabcdefghijklmnopqrtuvwxyzabcdefghijklmnopqrsuvwxyzabcdefghijklmnopqrstvwxyzabcdefghijklmnopqrstuwxyzabcdefghijklmnopqrstuvxyzabcdefghijklmnopqrstuvwyzabcdefghijklmnopqrstuvwxzabcdefghijklmnopqrstuvwxy}

test vigenere-4.2 {variant substitutions} {
    set c [cipher create variant -ct "$alphabetBlock" -period 26]
    $c sub aaaaaaaaaaaaaaaaaaaaaaaaaa abcdefghijklmnopqrstuvwxyz 1
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}

    set result
} {{aaaaaaaaaaaaaaaaaaaaaaaaaa abcdefghijklmnopqrstuvwxyz} abcdefghijklmnopqrstuvwxyzbcdefghijklmnopqrstuvwxyzacdefghijklmnopqrstuvwxyzabdefghijklmnopqrstuvwxyzabcefghijklmnopqrstuvwxyzabcdfghijklmnopqrstuvwxyzabcdeghijklmnopqrstuvwxyzabcdefhijklmnopqrstuvwxyzabcdefgijklmnopqrstuvwxyzabcdefghjklmnopqrstuvwxyzabcdefghiklmnopqrstuvwxyzabcdefghijlmnopqrstuvwxyzabcdefghijkmnopqrstuvwxyzabcdefghijklnopqrstuvwxyzabcdefghijklmopqrstuvwxyzabcdefghijklmnpqrstuvwxyzabcdefghijklmnoqrstuvwxyzabcdefghijklmnoprstuvwxyzabcdefghijklmnopqstuvwxyzabcdefghijklmnopqrtuvwxyzabcdefghijklmnopqrsuvwxyzabcdefghijklmnopqrstvwxyzabcdefghijklmnopqrstuwxyzabcdefghijklmnopqrstuvxyzabcdefghijklmnopqrstuvwyzabcdefghijklmnopqrstuvwxzabcdefghijklmnopqrstuvwxy}

test vigenere-4.3 {beaufort substitutions} {
    set c [cipher create beaufort -ct "$alphabetBlock" -period 26]
    $c sub aaaaaaaaaaaaaaaaaaaaaaaaaa abcdefghijklmnopqrstuvwxyz 1
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}

    set result
} {{aaaaaaaaaaaaaaaaaaaaaaaaaa abcdefghijklmnopqrstuvwxyz} abcdefghijklmnopqrstuvwxyzzabcdefghijklmnopqrstuvwxyyzabcdefghijklmnopqrstuvwxxyzabcdefghijklmnopqrstuvwwxyzabcdefghijklmnopqrstuvvwxyzabcdefghijklmnopqrstuuvwxyzabcdefghijklmnopqrsttuvwxyzabcdefghijklmnopqrsstuvwxyzabcdefghijklmnopqrrstuvwxyzabcdefghijklmnopqqrstuvwxyzabcdefghijklmnoppqrstuvwxyzabcdefghijklmnoopqrstuvwxyzabcdefghijklmnnopqrstuvwxyzabcdefghijklmmnopqrstuvwxyzabcdefghijkllmnopqrstuvwxyzabcdefghijkklmnopqrstuvwxyzabcdefghijjklmnopqrstuvwxyzabcdefghiijklmnopqrstuvwxyzabcdefghhijklmnopqrstuvwxyzabcdefgghijklmnopqrstuvwxyzabcdeffghijklmnopqrstuvwxyzabcdeefghijklmnopqrstuvwxyzabcddefghijklmnopqrstuvwxyzabccdefghijklmnopqrstuvwxyzabbcdefghijklmnopqrstuvwxyza}

test vigenere-4.4 {gronsfeld substitutions} {
    set c [cipher create gronsfeld -ct "$alphabetBlock" -period 26]
    $c sub aaaaaaaaaa azyxwvutsr 1
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}

    set result
} {{{abcdefghij                } aaaaaaaaaaaaaaaaaaaaaaaaaa} {azyxwvutsr                bazyxwvuts                cbazyxwvut                dcbazyxwvu                edcbazyxwv                fedcbazyxw                gfedcbazyx                hgfedcbazy                ihgfedcbaz                jihgfedcba                kjihgfedcb                lkjihgfedc                mlkjihgfed                nmlkjihgfe                onmlkjihgf                ponmlkjihg                qponmlkjih                rqponmlkji                srqponmlkj                tsrqponmlk                utsrqponml                vutsrqponm                wvutsrqpon                xwvutsrqpo                yxwvutsrqp                zyxwvutsrq                }}

# This test isn't finished yet

test vigenere-4.5 {porta substitutions} {
    set c [cipher create porta -ct "$alphabetBlock" -period 26]
    $c sub aaaaaaaaaaaaa nopqrstuvwxyz 1
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}

    set result
} {{{acegikmoqsuwy             } nqtwzpshijklmaaaaaaaaaaaaa} {nopqrstuvwxyz             opqrstuvwxyzn             pqrstuvwxyzno             qrstuvwxyznop             rstuvwxyznopq             stuvwxyznopqr             tuvwxyznopqrs             uvwxyznopqrst             vwxyznopqrstu             wxyznopqrstuv             xyznopqrstuvw             yznopqrstuvwx             znopqrstuvwxy             amlkjihgfedcb             bamlkjihgfedc             cbamlkjihgfed             dcbamlkjihgfe             edcbamlkjihgf             fedcbamlkjihg             gfedcbamlkjih             hgfedcbamlkji             ihgfedcbamlkj             jihgfedcbamlk             kjihgfedcbaml             lkjihgfedcbam             mlkjihgfedcba             }}

test vigenere-6.1 {beaufort fast solve} {
    set c [cipher create beaufort -ct "fluqk qbjcx mpojq eizug uirwr zwwcz nrpgz jrwen uwbqi cdybe gamjm ouavq mpxwb crwen fkexc mmdba" -period 6]
    $c solve
    set result [list [$c cget -key] [$c cget -pt]]
    rename $c {}

    set result
} {{aaaaaa friend} agoodneighborisafellowwhosmilesatyouoverthebackfencebutdoesntclimboveritbugsbaer}

test vigenere-7.1 {vigenere fit} {
    set c [createValidCipher vigenere]
    $c configure -period 8
    set result {}

    for {set i 1} {$i <= 8} {incr i} {
	lappend result [$c fit $i]
    }
    rename $c {}

    set result
} {s e r i o c i c}

test vigenere-7.2 {variant fit} {
    set c [createValidCipher variant]
    $c configure -period 5
    set result {}

    for {set i 1} {$i <= 5} {incr i} {
	lappend result [$c fit $i]
    }
    rename $c {}

    set result
} {g o o f e}

test vigenere-7.3 {beaufort fit} {
    set c [createValidCipher beaufort]
    $c configure -period 8
    set result {}

    for {set i 1} {$i <= 8} {incr i} {
	lappend result [$c fit $i]
    }
    rename $c {}

    set result
} {p r e v i b u s}

test vigenere-7.4 {porta fit} {
    set c [createValidCipher porta]
    $c configure -period 8
    set result {}

    for {set i 1} {$i <= 8} {incr i} {
	lappend result [$c fit $i]
    }
    rename $c {}

    set result
} {w w m u o w a s}

test vigenere-7.5 {gronsfeld fit} {
    set c [createValidCipher gronsfeld]
    $c configure -period 7
    set result {}

    for {set i 1} {$i <= 7} {incr i} {
	lappend result [$c fit $i]
    }
    rename $c {}

    set result
} {j d c f e j c}

test vigenere-8.1 {porta locate tip} {
    set c [cipher create porta -ciphertext ananannn]
    $c configure -period 5
    set result {}
    $c locate aa
    set result [$c cget -pt]

    rename $c {}

    set result
} {na   aa }

test vigenere-9.1 {encode vigenere} {
    set c [cipher create vigenere]

    set result [$c encode "accordingtoelcythevigenerecipherwasfirstusedinfifteenhundredandeightysix" [list periodic aaaaaaaa]]
    lappend result [$c cget -ct] [$c cget -pt] [$c cget -key] [$c cget -period]
    rename $c {}

    set result
} {pgtwfgqpvxfmzfgvwimquhvggitqdkmtlejnwuavjwvlwqnkuxvmbkcpsvvloqlgxkybmvqz pgtwfgqpvxfmzfgvwimquhvggitqdkmtlejnwuavjwvlwqnkuxvmbkcpsvvloqlgxkybmvqz accordingtoelcythevigenerecipherwasfirstusedinfifteenhundredandeightysix {periodic aaaaaaaa} 8}

test vigenere-9.2 {encode variant} {
    set c [cipher create variant]

    set result [$c encode "cequalspminusk" [list aaaaa apple]]
    lappend result [$c cget -ct] [$c cget -pt] [$c cget -key]
    rename $c {}

    set result
} {cpbjwldabenfdz cpbjwldabenfdz cequalspminusk {aaaaa apple}}

test vigenere-9.3 {encode beaufort} {
    set c [cipher create beaufort]

    set result [$c encode "inregardtosecretmessagesthereareallsortsofwaysofsendingthembutaprivatearrangementmustbepreviouslymadebetweenthesenderandthereceiver" [list aaaaaaaa previous]]
    lappend result [$c cget -ct] [$c cget -pt] [$c cget -key]
    rename $c {}

    set result
} {henrcodpwdmrgxqzdnmdiiqawkaeeodopgtduxbabmivkwgnxnrsabozinsuovudyjjvpkubyrrpecqfwfkdpnqdynjnuuchrfesenqztnaiphqalebrrohpwkaeemqkunn henrcodpwdmrgxqzdnmdiiqawkaeeodopgtduxbabmivkwgnxnrsabozinsuovudyjjvpkubyrrpecqfwfkdpnqdynjnuuchrfesenqztnaiphqalebrrohpwkaeemqkunn inregardtosecretmessagesthereareallsortsofwaysofsendingthembutaprivatearrangementmustbepreviouslymadebetweenthesenderandthereceiver {aaaaaaaa previous}}

test vigenere-9.4 {encode porta} {
    set c [cipher create porta]

    set result [$c encode "enciphermentisreciprocal" [list ygxrc encip]]

    lappend result [$c cget -ct] [$c cget -pt] [$c cget -key]
    rename $c {}

    set result
} {ygxrcoyjvrgmqjeywqgehwvu ygxrcoyjvrgmqjeywqgehwvu enciphermentisreciprocal {ooqsa hhijn}}

test vigenere-9.5 {encode gronsfeld} {
    set c [cipher create gronsfeld]

    set result [$c encode "thisoneusestenofthetwentysixvigenerealphabets" [list jdcbejc aaaaaaa]]

    lappend result [$c cget -ct] [$c cget -pt] [$c cget -key]
    rename $c {}

    set result
} {ckktswgdvgtxnpxiviicynqvzwrzelifrntndnqljdnwu ckktswgdvgtxnpxiviicynqvzwrzelifrntndnqljdnwu thisoneusestenofthetwentysixvigenerealphabets {jdcbejc aaaaaaa}}
