[docHeader "Cipher Type - columnar"]
[Ciphertype columnar]
[SynopsisHeader]
[Synopsis {} "set cipherProc \[cipher create $cipherType\]"]
<BR>
[Synopsis <I>cipherProc</I> "configure ?options?" configure]
[Synopsis <I>cipherProc</I> "cget option" cget]
[Synopsis <I>cipherProc</I> "restore key" restore]
[Synopsis <I>cipherProc</I> "shift col amount" shift]
[Synopsis <I>cipherProc</I> "swap col1 col2" swap]
[Synopsis <I>cipherProc</I> "undo" undo]
[Synopsis <I>cipherProc</I> "solve" solve]

[StartDescription]

[Description "<I>cipherProc</I> configure ?options?" configure \
"Configure the settings for the $cipherType cipher.  Valid options are:
<P>
<DL>
    [ConfigureCt]
    [ConfigurePeriod]
    [ConfigureStepinterval]
    [ConfigureStepcommand]
    [ConfigureBestfitcommand]
    [ConfigureLanguage]

</DL>"]

[Description "<I>cipherProc</I> cget option" cget \
"Look up the value for a given option.  Valid options are:
<P>
<DL>
    [CgetType]
    [CgetCt]
    [CgetPt]
    [CgetKey]
    [CgetLength]
    [CgetPeriod]
    [CgetStepinterval]
    [CgetStepcommand]
    [CgetBestfitcommand]
    [CgetLanguage]
</DL>"]

[Description "<I>cipherProc</I> restore key" restore \
"The <B>restore</B> command restores the cipher's key to a previously stored
state.  The output from <B><I>cipherProc</I> cget -key</B> can be passed back
into the <B>restore</B> command to implement a crude <I>save</I> feature.
Example:
<P>
<B><CODE>set key \[\$firstCipher cget -key\]</CODE></B>
<BR>
<B><CODE>\$secondCipher restore \$key</CODE></B>
"]

[Description "<I>cipherProc</I> shift col amount" shift \
"Shift a column to the right or left by a number of columns.  Shifting by
a negative amount performs a left shift.  Positive amounts are right shifts.
Columns can't be shifted past the start or end."]

[Description "<I>cipherProc</I> swap column1 column2" swap \
"Swap the two specified columns."]

[Description "<I>cipherProc</I> undo" undo \
"Clears all changes that have been made to the ciphertext."]

[Description "<I>cipherProc</I> solve" solve \
"Iterate through all (period !) combinations of possible keys.  The key
that produces plaintext with the highest digram frequency count is used
as the solution."]

[EndDescription]

[footer]
