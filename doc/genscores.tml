[docHeader "Cipher Program - genscores"]
[Command genscores "Generate scoring tables from a set of plaintext files."]

[SynopsisHeader]
[Synopsis genscores "-type value \[-verbose\] \[-elemsize nchars\] \[-output outfilename\] \[-validchars chars\] file1 ?file2 ...?"]

<p>
All data is normalized after being generated.  Multiple input files may be used to create a large sample of plaintext.

[StartDescription]

[Description "-type value" type \
"The scoring method to use in the generated scoring table.  This must be one of the builtin types returned by the <code>score types</code> command."]

[Description "-verbose" verbose \
"Print a little more information as the table is being generated."]

[Description "-elemsize nchars" elemsize \
"The size of the elements for ngram based score types."]

[Description "-output outfilename" output \
"The name of the file where the results should be written.  Use '-' for stdout (which is the default)"]

[Description "-validchars chars" validchars \
"The set of valid characters for the scoring table elements.  Defaults to 'abcdefghijklmnopqrstuvwxyz'.  Make sure to shell-escape any questionable characters such as '*' and '?'."]

[EndDescription]

[StartDescription EXAMPLES]

[Description "genscores -type digramlog -output myDigramTable.tcl frank14.txt" example1 \
"Generate and save a sum-of-logs-of-digram-frequencies scoring table based on the standard Frankenstein text."]

[Description "genscores -type ngramcount -verbose -elemsize 5 -output my5gramTable.tcl file1.txt file2.txt file3.txt file4.txt" example2 \
"Generate and save a 5-gram frequencies based on the sum of 4 input files.  Extra status information is printed while the program runs."]

[Description "genscores -type ngramlog -elemsize 4 -output my4gramTable.tcl -validchars \"abcdefghijklmnopqrstuvwxyz \" file1.txt" example2 \
"Generate and save a 4-gram frequency scoring table that includes word boundaries."]

[EndDescription]

[footer]
