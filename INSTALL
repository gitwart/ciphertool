Initial Requirements
====================

This package requires the Tcl/Tk toolkit version 8.0 or later from Ajuba
Solutions (formerly Scriptics Corporation).  You can download the source code
and precompiled binaries/libraries for Tcl at the developers website:
http://dev.scriptics.com
The tkcrithm program requires Tcl/Tk version 8.3.1 or later.  The rest
of the software should work fine with Tcl/Tk 8.0 and up.

This software has only been built on a Linux 2.x system.  I know of no
reason that it would not build on any other unix platform.  It may
also be possible to compile it on a Windows computer.  If you have
any luck in doing so, please let me know.  A Visual Studio project file for
building this software would be greatly appreciated.

Prebuilt binaries for Linux are available in rpm format.  They should be
located in the same place where you downloaded these sources.

Installation Summary
====================

This section is a brief overview of the installation process.

Unpack the sources.  If you are reading this then you've already done
this step.  :)

Configure the sources and create the Makefile by running the configure script:

% ./configure

This will attempt to locate the installed Tcl software on your system.  If
it is not able to find it automatically, you'll have to specify the directory
containing the tclConfig.sh file by hand:

% ./configure --with-tcl=/usr/lib

Build the software:

% make

Install the software:

% make install

Optionally, you can run the test suite for the software.  No errors should
be reported from the test suite.  If any do occur, please send the output
from the test run to the author of the software <wart@kobold.org>.  Note
that the test suite will only run if you are using Tcl version 8.2 or later.

% make test

That's all there is to it!

A debug version of the library can be built as well.  Here's how I normally
run the configure script when I want to do debugging:

CC='cc -pg' ./configure --prefix=/home/wart --enable-dmalloc --enable-symbols --with-tcl=/home/wart/tcl/lib

The "-pg" flag to cc turns on profiling, so you can find out where the program
is spending most of its time.  The "--enable-symbols" adds a "-g" compiler
flag to produce debugging symbols in the final program, useful when tracking
down bugs with the gdb debugger.  "--enable-dmalloc" enables the use of
a replacement memory management library that tracks where memory is allocated
and freed, and can produce information on memory leaks and general memory
usage statistics.  I also use "--with-tcl=/home/wart/tcl/lib" to link to a
slightly modified version of the Tcl library that has also been compiled
with the dmalloc library, debugging symbols, and profiling.  This helps to
figure out if I'm using the Tcl library in an efficient way.

Useful (but verbose) dmalloc settings:
    dmalloc medium -l dmalloc.log -p allow-free-null -p log-trans

WINDOWS BUILD
=============

The recommended method to build extensions under windows is to use the
Msys + Mingw build process. This provides a Unix-style build while
generating native Windows binaries. Using the Msys + Mingw build tools
means that you can use the same configure script as per the Unix build
to create a Makefile. You can download a working msys+mingw package
from http://sourceforge.net/project/showfiles.php?group_id=10894&package_id=41063.
It might be possible using Visual C 5.0/6.0, but the author does not have
a copy of that compiler to try it out.  See http://sources.redhat.com
for more information on cygwin, and http://www.mingw.org for more information
on mingw.

Here's a set of additional steps that I had to take to get the software to
build on Windows using mingw (These need to be tested again):

1) Install a windows version of Tcl from ActiveTcl from
   http://www.activestate.com/Products/ActiveTcl/
2) Install mingw from http://sourceforge.net/project/showfiles.php?group_id=10894&package_id=41063
3) Unpack the ciphertool sources
4) Run the configure script as:
   ./configure
5) Run "make"
6) Install the libraries and programs with "make install"

The creation of the tcipher.exe exeuctable should succeed, but running it
will fail.  This should not cause any problems because it is only used to
generate the documentation.

It is also possible to build a windows self-extracting installer.  You will
need the freely available NSIS installer packaging toolkit available from
http://nsis.sourceforge.net.

1) Follow steps 1-3 above for building ciphertool on windows.
2) Create an empty directory for storing the installer input files
   mkdir c:/tcl/temp_prefix
2) When running 'configure', make sure you pass in the directory you just
   created as the output directory.  Otherwise the installer will pick up all
   of the ActiveTcl files in addition to the ciphertool files.
   ./configure --prefix=c:/tcl/temp_prefix --exec_prefix=c:/tcl/temp_prefix
3) Run "make" and "make install"
4) Run "make wininstaller"

The output will be a file called "Ciphertool_161_Setup.exe".
Install and enjoy!

Basic Installation
==================

   These are generic installation instructions.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, a file
`config.cache' that saves the results of its tests to speed up
reconfiguring, and a file `config.log' containing compiler output
(useful mainly for debugging `configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If at some point `config.cache'
contains results you don't want to keep, you may remove or edit it.

   The file `configure.in' is used to create `configure' by a program
called `autoconf'.  You only need `configure.in' if you want to change
it or regenerate `configure' using a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make test' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use `make distclean' before reconfiguring for another
architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

   There may be some features `configure' can not figure out
automatically, but needs to determine by the type of host the package
will run on.  Usually `configure' can figure that out, but if it prints
a message saying it can not guess the host type, give it the
`--host=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name with three fields:
     CPU-COMPANY-SYSTEM

See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the host type.

   If you are building compiler tools for cross-compiling, you can also
use the `--target=TYPE' option to select the type of system they will
produce code for and the `--build=TYPE' option to select the type of
system on which you are compiling the package.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Operation Controls
==================

   `configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely useful, options.
