#!/bin/sh
# \
exec tclsh "$0" ${1+"$@"}

# hillclimb --
#
#	Hill climbing autosolver for a variety of cipher types.
#
# RCS: @(#) $Id: hillclimb,v 1.28 2008/03/02 05:10:42 wart Exp $
#
# Copyright (C) 2001-2008  Mike Thomas <wart@kobold.org>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

package require cmdline
package require cipher
package require CipherUtil
package require Hillclimb
package require Dictionary
package require Scoredata
package require Scoretypes

# Command line processing

set options [list \
    [list file.arg "-" "The name of the input cipher file"] \
    [list type.arg {} "The cipher type"] \
    [list period.arg 0 "The period for the cipher.  Only use this with periodic ciphers"] \
    [list blocks.arg 8 "The number of blocks for a phillips cipher."] \
    [list random "Perform random mutations after hills are found.  If not specified, then keywords are used as hill seeds."] \
    [list randommutate "If specified, then mutations will be of a random amount up to -mutate."] \
    [list seedmutate "If specified, then mutations will be performed on the seed key given by the -keyword argument."] \
    [list keyword.arg {} "The keyword to use as a seed for hillclimbing"] \
    [list maxhills.arg 0 "The maximum number of hills to climb before exitting.  If not specified then the program will run forever."] \
    [list deadhills.arg 0 "If no new maximum has been found after searching the first number of hills, then switch to the secondary scoring function.  If no new hills are found after searching the same number of hills with the second scoring function, then mutate and switch back to the first scoring function."] \
    [list addspace "Locate spaces in the resulting plaintext."] \
    [list scoretype.arg {} "The method to use when scoring plaintext."] \
    [list finescoretype.arg {} "The secondary method to use when scoring plaintext near a maximum."] \
    [list comboweight.arg {} "The weight to apply to the wordtree in the custom comboscore scoring function."] \
    [list language.arg {} "The foreign language used in this cipher.  This determines which language-specific scoring table to load."] \
    [list maxvalue.arg {} "Hillclimbing will stop when this score value has been met or exceeded."] \
    [list mutate.arg 13 "The maximum amount to mutate the key when searching for a new hill to climb."] \
    [list mutatechance.arg 0.2 "The chance that the next mutation will occur from the current local solution instead of the best global solution."] \
    [list dictionary.arg {} "The directory containing the presorted dictionary files."] \
    [list churn "Iterate through all possible substitutions for the most common letter in the ciphertext.  Must be used with -maxhills and can only be used with simple substitution ciphers."
]

if {[catch {
    foreach {var val} [::cmdline::getoptions argv $options] {
	set $var $val
    }
} msg]} {
    puts stderr $msg
    exit 1
}

# Command line validation

if {$type == ""} {
    puts stderr "[::cmdline::usage $options {option '-type' missing}]"
    exit 1
}

if {$random && $keyword != ""} {
    puts stderr "-random and -keyword arguments can not be used together.  -keyword will be ignored."
}

if {$random && $seedmutate} {
    puts stderr "-random and -seedmutate arguments can not be used together.  -seedmutate will be ignored."
}

if {$churn && $maxhills <= 0} {
    puts stderr "-maxhills must be used when -churn is enabled.  Disabling churn option."
    set churn 0
}

if {$dictionary != ""} {
    set Dictionary::directory $dictionary
}

if {$scoretype == "" && $language != ""} {
    set scoretype digramlog
}
set elemsize {}
if {[regexp {(^[0-9]+)(gram.*)} $scoretype null elemsize scoretype]} {
    set scoretype n${scoretype}
}
if {$scoretype != ""} {
    if {[lsearch [score types] $scoretype] == -1} {
        set defaultScore $scoretype
    } else {
        set defaultScore [score create $scoretype]

        if {$elemsize != ""} {
            $defaultScore elemsize $elemsize
        }
        Scoredata::loadData $defaultScore $language
    }

    score default $defaultScore

    if {$comboweight != ""} {
        set Scoretypes::comboweight $comboweight
    }
}
if {$finescoretype == ""} {
    set fineScore $defaultScore
}
set elemsize {}
if {[regexp {(^[0-9]+)(gram.*)} $finescoretype null elemsize finescoretype]} {
    set finescoretype n${finescoretype}
}
if {$finescoretype != ""} {
    if {[lsearch [score types] $finescoretype] == -1} {
        set fineScore $finescoretype
    } else {
        set fineScore [score create $finescoretype]

        if {$elemsize != ""} {
            $fineScore elemsize $elemsize
        }
        Scoredata::loadData $fineScore $language
    }

    if {$comboweight != ""} {
        set Scoretypes::comboweight $comboweight
    }
}

set filename $file

proc sortByValue {arrVar a b} {
    upvar $arrVar arr 

    return [expr {$arr($a) - $arr($b)}]
}

# If any of the fixed keywords contain a space then the spaces are the
# variable positions in the key.  Remember these positions and then fill
# them in.

if {$random} {
    set keyword $Hillclimb::singleSeedKey($type)
}

set fixedKeywordList $keyword

set tempList {}
foreach key $fixedKeywordList {
    if {[string first { } $key] != -1} {
	foreach {newkey holes} [Hillclimb::plugKeyHoles $key] {}
	lappend tempList $newkey
	lappend Hillclimb::fixedKeyPositions $holes
    } else {
	lappend tempList $key
    }
}
if {[llength $tempList] != 0} {
    set fixedKeywordList [list $tempList]
} else {
    set fixKeywordList {}
}
set seedKey {}

# Load the cipher
set ct [CipherUtil::readCiphertext $filename]

foreach letter [list a b c d e f g h i j k l m n o p q r s t u v w x y z] {
    set histogram($letter) 0
}
for {set i 0} {$i < [string length $ct]} {incr i} {
    set letter [string index $ct $i]
    if {[info exists histogram($letter)]} {
        incr histogram($letter)
    }
}
set mostFreqLetter [lindex [lsort -decreasing -command [list sortByValue histogram] [array names histogram]] 0]
puts "# Most frequent letter: $mostFreqLetter"

if {$type == "aristocrat"} {
    regsub -all { } $ct {} ct
}

if {$type == "gromark"} {
    set c [cipher create $type -ct $ct -primer $period]
} elseif {$type == "phillips"} {
    set c [cipher create $type -ct $ct -blocks $blocks]
} elseif {$period != "" && $period > 0} {
    set c [cipher create $type -ct $ct -period $period]
} else {
    set c [cipher create $type -ct $ct]
}

if {[info exists ::env(CIPHER_LANGUAGE)]} {
    $c configure -language $::env(CIPHER_LANGUAGE)
    puts "Using language=[$c cget -language]"
}

# Iterate over all possible keys

set dictionaryWordLengths [list 10]
set Dictionary::cache {}
#set key [lindex $argv 0]

catch {[$c configure -bestfitcommand show_best_fit -stepcommand show_fit -stepinterval $stepInterval]}

if {$type == "aristocrat" && [llength [lindex $fixedKeywordList 0]] != 0} {
    set fixedKeywordList [list [list abcdefghijklmnopqrstuvwxyz $fixedKeywordList]]
}

set Hillclimb::neighborProc $Hillclimb::swapKeyProc($type)
set Hillclimb::decipherProc $Hillclimb::decipherProcFromType($type)
set Hillclimb::stepInterval 0
set Hillclimb::stepCommand {}
set Hillclimb::bestFitCommand {}
set Hillclimb::cipherObject $c
set Hillclimb::scoreObj [score default]
set Hillclimb::fineScoreObj $fineScore
set Hillclimb::mutationAmount $mutate
set stepInterval 50
set maxValue -100000
set maxKey {}

array set visited {}
if {$fixedKeywordList == ""} {
    set curIteration 0
    foreach wordLength $dictionaryWordLengths {
	#puts "Checking keys in $dictFile"

	foreach keyword [Dictionary::lookupByLength $wordLength] {
	    regsub -all -- {[-']} $keyword {} keyword
            # Gratuitous comment with ' to fix vim syntax highlighting

	    # The catch is needed to trap errors from keywords that contain
	    # bad characters, like apostrophes.
	    if {! [catch {set fullKeyList [$Hillclimb::fullKeyListFromType($type) $keyword]} err] } {
		incr curIteration
		foreach fullKey $fullKeyList {
		    foreach {bestKey val} [Hillclimb::start $fullKey] {}
                    if {![info exists visited($bestKey)]} {
                        set visited($bestKey) 0
                    }
                    incr visited($bestKey)

		    if {$val > $maxValue} {
			set maxValue $val
			set maxKey $bestKey
			Hillclimb::showFit $bestKey $curIteration $maxValue $keyword
		    }

		}
		if {$stepInterval && $curIteration % $stepInterval == 0} {
		    Hillclimb::showFit $fullKey $curIteration
		}
	    } else {
		puts stderr "Skipping invalid keyword $keyword:$::errorInfo"
	    }
	}
    }
} else {
    set curIteration 0
    set maxIteration 0
    set fullKey [lindex $fixedKeywordList 0]

    # Give the initial key a good bit of randomizing.
#    set fullKey [::Hillclimb::mutate $fullKey 100]

    #puts "keywordlist is $fixedKeywordList"
    $c restore [lindex $fullKey 0] [lindex $fullKey 1]
    set seedKey [$c cget -key]
    set visited($seedKey) 0
    Hillclimb::showFit $fullKey $curIteration [score value [$c cget -pt]]

    while {1} {
        foreach {bestKey val} [Hillclimb::start $fullKey] {}
        incr curIteration
        if {![info exists visited($bestKey)]} {
            set visited($bestKey) 0
        }
        incr visited($bestKey)

        if {$val > $maxValue} {
            set maxValue $val
            set maxKey $bestKey
            set maxIteration $curIteration
            Hillclimb::showFit $bestKey $curIteration $maxValue
        }

        if {$stepInterval && $curIteration % $stepInterval == 0} {
            Hillclimb::showFit $bestKey $curIteration
        }
        if {$curIteration >= $maxhills && $maxhills != 0} {
            break
        }
        if {$maxvalue != {} && $maxValue >= $maxvalue} {
            break
        }

        if {$randommutate} {
            set mutateAmount [expr {int(rand() * $mutate)}]
        } else {
            set mutateAmount $mutate
        }

        # If we've gone a while without finding a new hill, then start
        # using our secondary scoring function.
        if {$deadhills > 0 && $curIteration - $maxIteration > $deadhills} {
            if {$Hillclimb::scoreObj != $fineScore} {
                puts "# No new maximum after $deadhills hills.  Switching to secondary scoring function."
                set Hillclimb::scoreObj $fineScore
                #set Hillclimb::mutationAmount [expr {($Hillclimb::mutationAmount + 4) / 4}]
                #set seedmutate 1
                set seedKey $maxKey
                set bestKey $maxKey
                set fullKey $maxKey
                set deadhills 0
#                set mutatechance 0.0
                puts "# Using new mutation amount $Hillclimb::mutationAmount"
#                set stepInterval 1
#                set curIteration $maxIteration
                set maxValue [$fineScore value [$Hillclimb::decipherProc $c $maxKey]]
                Hillclimb::showFit $maxKey $curIteration $maxValue
            } else {
                break
            }
        } elseif {$seedmutate} {
            set fullKey [::Hillclimb::mutate $seedKey $mutateAmount]
        } elseif {[expr {rand()}] < $mutatechance} {
            set fullKey [::Hillclimb::mutate $bestKey $mutateAmount]
        } else {
            set fullKey [::Hillclimb::mutate $maxKey $mutateAmount]
        }
    }
    lappend result $curIteration
}

# This next step has the side effect of setting the key in the cipher
# object.

$Hillclimb::decipherProc $c $maxKey
if {$addspace} {
    set Dictionary::cache [list length word]
    set readablePt [Dictionary::findWords [$c cget -pt]]
}

set sortedHilltops [lsort -decreasing -command [list sortByValue visited] [array names visited]]

foreach channel [list stdout] {
    puts $channel "#=========="
    puts $channel ""
    CipherUtil::writeCipherToFile $c $channel
    if {$addspace} {
	puts $channel "#plaintext=$readablePt"
    }
    puts $channel "#Score value:  [score value [$c cget -pt]]"
    if {$seedKey != ""} {
        puts $channel "#hilltop (seed) count:  [format %4.1f%% [expr 100.0 * $visited($seedKey) / $curIteration]] ($visited($seedKey))"
    }
    puts $channel "#Unique hilltops: [llength [array names visited]]"
    for {set i 0} {$i < 5 && $i < [llength $sortedHilltops]} {incr i} {
        puts $channel "#hilltop $i count:  [format %4.1f%% [expr 100.0 * $visited([lindex $sortedHilltops $i]) / $curIteration]] ($visited([lindex $sortedHilltops $i]))"
    }
}
