#!/bin/sh
# \
exec tclsh "$0" ${1+"$@"}

# pathilltipsearch --
#
#	Hill climber for patristocrat ciphers with a tip.
#
# RCS: @(#) $Id: pathilltipsearch,v 1.12 2008/03/05 03:54:58 wart Exp $
#
# Copyright (C) 2000-2005  Mike Thomas <wart@kobold.org>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

package require cmdline
package require cipher
package require CipherUtil
package require Scoredata
package require Scoretypes
package require Hillclimb
package require Dictionary

set options [list \
    [list file.arg "-" "The name of the input cipher file"] \
    [list tip.arg {} "The optional plaintext tip for this cipher."] \
    [list tipstart.arg {} "The string of ct where this tip begins."] \
    [list hills.arg 100 "The maximum number of hills to climb for each possible tip placement.  Defaults to 100."] \
    [list scoretype.arg {} "The method to use when scoring plaintext."] \
    [list language.arg {} "The foreign language used in this cipher.  This determines which language-specific scoring table to load."] \
    [list addspace "Locate spaces in the resulting plaintext."] \
    [list dictionary.arg {} "The directory containing the presorted dictionary files."] \
]

if {[catch {
    foreach {var val} [::cmdline::getoptions argv $options] {
	set $var $val
    }
} msg]} {
    puts stderr $msg
    exit 1
}

if {$tip == ""} {
    puts stderr "[::cmdline::usage $options {option '-tip' must be specified.}]"
    exit 1
}

if {$dictionary != ""} {
    set Dictionary::directory $dictionary
}

if {$scoretype == "" && $language != ""} {
    set scoretype digramlog
}
set elemsize {}
if {[regexp {(^[0-9]+)(gram.*)} $scoretype null elemsize scoretype]} {
    set scoretype n${scoretype}
}
if {$scoretype != ""} {
    if {[lsearch [score types] $scoretype] == -1} {
        set defaultScore $scoretype
    } else {
        set defaultScore [score create $scoretype]

        if {$elemsize != ""} {
            $defaultScore elemsize $elemsize
        }
        Scoredata::loadData $defaultScore $language
    }

    score default $defaultScore
}

set type aristocrat

# Read the ciphertext from the input file
set ct [CipherUtil::readCiphertext $file]

regsub -all { } $ct {} ct
set cipher [cipher create aristocrat -ct $ct]

set Hillclimb::neighborProc $Hillclimb::swapKeyProc($type)
set Hillclimb::decipherProc $Hillclimb::decipherProcFromType($type)
#set Hillclimb::stepInterval 0
#set Hillclimb::stepCommand {}
#set Hillclimb::bestFitCommand {}
set Hillclimb::cipherObject $cipher
set maxValue 0
set maxKeyword {}
set maxKey {}
set i 0
set Hillclimb::stepInterval $hills
set Hillclimb::mutationAmount 10

proc printComment {string} {
    puts #$string
}

# Loop through all possible tip positions
if {$tipstart == ""} {
    set tipStartIndex 0
}
set tipStartIndex [string first $tipstart [$cipher cget -ciphertext]]

set result [Hillclimb::patTipSearch $Hillclimb::stepInterval \
	$tip $tipStartIndex]
set maxKey [lindex $result 0]
set maxValue [lindex $result 1]

$cipher restore [lindex $maxKey 0] [lindex $maxKey 1]
regsub -all { } [$cipher cget -pt] {} pt
if {$addspace} {
    set Dictionary::cache [list length word]
    set readablePt [Dictionary::findWords $pt]
}

puts "#=========="
puts ""
CipherUtil::writeCipherToFile $cipher stdout
if {$addspace} {
    puts "#plaintext$readablePt"
}
puts "keyword=$maxKeyword"
