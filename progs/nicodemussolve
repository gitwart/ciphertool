#!/bin/sh
# \
exec tclsh "$0" ${1+"$@"}

# nicodemus --
#
#	Dictionary solver for nicodemus ciphers.
#
# RCS: @(#) $Id: nicodemussolve,v 1.10 2008/03/16 23:47:29 wart Exp $
#
# Copyright (C) 2000-2003  Mike Thomas <wart@kobold.org>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

package require cipher
package require CipherUtil
package require Dictionary

# Command line processing

if {[llength $argv] < 3 || [llength $argv] > 4} {
    puts stderr "Usage:  $argv0 file encoding period ?keyword?"
    exit 1
}

set typeList	[list vigenere variant beaufort]
set filename	[lindex $argv 0]
set encoding	[lindex $argv 1]
set period	[lindex $argv 2]
set keyword	[lindex $argv 3]
set stepInterval  10

# Read the ciphertext from the input file

set ciphertext [CipherUtil::readCiphertext $filename]
set ciphertext [string tolower $ciphertext]

if {$keyword == ""} {
    set keywordList [Dictionary::lookupByLength $period]
} else {
    set keywordList $keyword
    set stepInterval 50000
}

set cipher [cipher create nicodemus -period $period -encoding $encoding \
	-ct $ciphertext]

proc nicodemusFitCmd {cipher order} {
    global keywordList
    global count
    global period
    global maxValue
    global maxKey
    global stepInterval

    set order [string map "{ } {} 0 a 1 b 2 c 3 d 4 e 5 f 6 g 7 h 8 i 9 j 10 k 11 l 12 m 13 n 14 o 15 p 16 q 17 r 18 s 19 t 20 u 21 v 22 w 23 x 24 y 25 z" $order]

    incr count
    foreach keyword $keywordList {
	# If the keyword contains an invalid nicodemus key character,
	# such as - or ', then don't process that keyword.
	set keyword [string map {' {} - {}} $keyword]
	if {[string length $keyword] == [$cipher cget -period]} {
	    $cipher restore $keyword $order
	    set pt [$cipher cget -pt]
	    set value [score value $pt]
	    #puts "$value ([$cipher cget -key]): $pt"
	    if {$value > $maxValue} {
		set maxValue $value
		set maxKey [list $keyword $order]
		puts "$count:  $maxKey  Fit:  $value"
		puts "$pt"
		puts ""
	    }
	}
    }

    if {$count%$stepInterval == 0} {
	puts "$count:  $order"
	puts "$pt"
	puts ""
    }
}

set maxValue 0
set maxKey 0
set count 0
permute $period "nicodemusFitCmd $cipher"

$cipher restore [lindex $maxKey 0] [lindex $maxKey 1]

set readablePt [Dictionary::findWords [$cipher cget -pt]]

puts "#=========="
puts ""
CipherUtil::writeCipherToFile $cipher stdout
puts "#plaintext=$readablePt"
