#!/bin/sh
# \
exec tclsh "$0" ${1+"$@"}

# autokeybrute --
#
#	Autokey cipher brute force solver
#
# RCS: @(#) $Id: autokeybrute,v 1.5 2008/03/05 03:54:58 wart Exp $
#
# Copyright (C) 2000-2002  Mike Thomas <wart@kobold.org>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

package require cipher
package require CipherUtil

# Command line processing

if {[llength $argv] < 3 || [llength $argv] > 6} {
    puts stderr "Usage:  $argv0 cipherfile ciphertype period [startIndex] [endIndex] [initial key]"
    exit 1
}

set filename [lindex $argv 0]
set ciphertype [lindex $argv 1]
set period [lindex $argv 2]
set startIndex [lindex $argv 3]
set endIndex [lindex $argv 4]
set initialKey [lindex $argv 5]

if {$startIndex < 0} {
    set startIndex 0
}
if {$endIndex >= $period} {
    set endIndex [expr $period - 1]
}

if {$startIndex > $endIndex} {
    puts stderr "Start index ($startIndex) must be less then end index ($endIndex)"
}

set alphabet "a b c d e f g h i j k l m n o p q r s t u v w x y z"
set stepInterval  1000

# Read the ciphertext from the input file
set ciphertext [CipherUtil::readCiphertext $filename]
regsub -all { } $ciphertext {} ciphertext

switch -- $ciphertype {
    vigenere {
	set ptconv vigpt
	set keyconv vigkey
    }
    variant {
	set ptconv varpt
	set keyconv varkey
    }
    beaufort {
	set ptconv beapt
	set keyconv beakey
    }
    default {
	puts stderr "Unsupported type $ciphertype"
	exit 1
    }
}

proc decodeAutokey {ciphertext clength ptconv type primer period} {
    set keyblock $primer
    set pt {}
    for {set i 0} {$i < $clength} {incr i $period} {
	set ptblock {}
	for {set j 0} {$j < $period && $j + $i < $clength} {incr j} {
	    set keyLetter [string index $keyblock $j]
	
	    # We must take into account the fact that the primer might be
	    # incomplete.

	    if {$keyLetter != "" && $keyLetter != " "} {
		set ctLetter [string index $ciphertext [expr {$j + $i}]]
		set ptLetter [key convert $ptconv $keyLetter $ctLetter]
		append ptblock [key convert $ptconv $keyLetter $ctLetter]
	    } else {
		append ptblock " "
	    }
	}
	append pt "${ptblock}"
	set keyblock $ptblock
    }

    return $pt
}

set maxValue 0
set maxKey 0
set maxPt 0
set count 0
set loopCode {}
for {set i 0} {$i < $period} {incr i} {
    append loopCode "set keyLetter$i \"[string index $initialKey $i]\"\n"
}
for {set i $startIndex} {$i <= $endIndex} {incr i} {
    append loopCode "foreach keyLetter$i \"$alphabet\" \{\n"
}
append loopCode {    set key }
for {set i 0} {$i < $period} {incr i} {
    append loopCode "\$keyLetter$i"
}
append loopCode \n
append loopCode "    set pt \[decodeAutokey \"$ciphertext\" [string length $ciphertext] $ptconv $ciphertype \$key $period\]\n"
append loopCode {
    set value [score value $pt]
    if {$value > $maxValue} {
	regsub -all { } $pt {_} pt
	set maxValue $value
	set maxKey $key
	set maxPt $pt
	puts "Key:  $key  Fit:  $value"
	puts "$pt"
    }
    if {$count % $stepInterval == 0} {
	puts "$count:  $key"
    }
    incr count
}
for {set i $startIndex} {$i <= $endIndex} {incr i} {
    append loopCode "\}\n"
}

puts "loopCode =\n$loopCode"
eval $loopCode

puts ""
puts "========================================================================"
puts "Key:  $maxKey  Max Fit:  $maxValue"
puts "$maxPt"
puts "========================================================================"
puts ""
