#!/bin/sh
# \
exec tclsh "$0" ${1+"$@"}

# patsplit --
#
#	Insert spaces into a string to form words.  This is useful when
#	trying to reconstruct a readable sentence from a plaintext string
#	that has had the spaces removed.
#
# RCS: @(#) $Id: patsplit,v 1.10 2008/03/31 19:33:46 wart Exp $
#
# Copyright (C) 2002-2003  Mike Thomas <wart@kobold.org>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

package require cmdline
package require CipherUtil
package require Dictionary

# Command line processing

set options [list \
    [list file.arg "-" "The name of the input cipher file"] \
    [list dictionary.arg {} "The directory containing the presorted dictionary files."] \
]

if {[catch {
    foreach {var val} [::cmdline::getoptions argv $options] {
	set $var $val
    }
} msg]} {
    puts stderr $msg
    exit 1
}

if {$dictionary != ""} {
    set Dictionary::directory $dictionary
}

# Read the ciphertext from the input file.  The input file can be either
# a cipher savefile or a file containing only the plaintext.
array set cipherData [CipherUtil::loadCipher $file]
if {[llength [array names cipherData]] != 0 && [info exists cipherData(plaintext)]} {
    set pt $cipherData(plaintext)
} else {
    set pt [CipherUtil::readCiphertext $file]
}

# Remove all spaces.  We're going to try to detect where they ought to be.
regsub -all { } $pt {} pt

set solution [Dictionary::findWords $pt]

if {$solution != ""} {
    puts $solution
} else {
    puts "No solution found for $pt"
}
