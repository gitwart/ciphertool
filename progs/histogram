#!/bin/sh
# \
exec tclsh "$0" ${1+"$@"}

# histogram --
#
#	Display a histogram for a selection of ciphertext.
#
# RCS: @(#) $Id: histogram,v 1.4 2008/03/05 03:54:58 wart Exp $
#
# Copyright (C) 2002  Mike Thomas <wart@kobold.org>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

package require cipher
package require CipherUtil

# Command line processing

if {[llength $argv] < 1 || [llength $argv] > 2} {
    puts stderr "Usage:  $argv0 file ?period?"
    exit 1
}

set filename [lindex $argv 0]
set period [lindex $argv 1]
if {$period == "" || $period < 0} {
    set period 0
}

# Read the ciphertext from the input file

set ct [CipherUtil::readCiphertext $filename]
regsub -all { } $ct {} ct

# show_hist
#
#	Display a histogram to the user on stdout.
#
# Arguments:
#
#	arrayDesc	A list of letter/count pairs.  Ex:  {a 1} {b 2} ...
#
# Result:
#	None.

proc show_hist {arrayDesc} {
    array set histogram $arrayDesc

    foreach letter [lsort [array names histogram]] {
	puts -nonewline "[format %3d $histogram($letter)]"
    }
    puts ""
    foreach letter [lsort [array names histogram]] {
	puts -nonewline "  [string toupper $letter]"
    }
    puts ""
}

# Now we can create the histograms.

set histogram(total) [stat histogram $ct]
show_hist $histogram(total)

# Split the ciphertext up into columns so we can make histograms of
# each column independently.

if {$period > 0} {
    for {set i 0} {$i < $period} {incr i} {
	set column($i) {}
    }

    set position 0
    foreach letter [string tolower [split $ct {}]] {
	append column([expr {$position % $period}]) $letter
	incr position
    }

    for {set i 0} {$i < $period} {incr i} {
	puts ""
	puts "Column [expr {$i + 1}]: $column($i)"
	show_hist [stat histogram $column($i)]
    }
}
