#!/bin/sh
# \
exec tclsh "$0" ${1+"$@"}

# homotopat --
#
#	Convert a (possibly keyed) homophonic cipher to a patristocrat
#	by matching histogram distributions of the 4 shifted homophonic
#	alphabets.
#
# RCS: @(#) $Id: homotopat,v 1.3 2008/03/05 03:54:58 wart Exp $
#
# Copyright (C) 2003  Mike Thomas <wart@kobold.org>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

package require cipher
package require CipherUtil

if {[llength $argv] < 1 || [llength $argv] > 2} {
    puts stderr "Usage:  $argv0 ?cipherfile?"
    exit 1
}

set filename [lindex $argv 0]
if {$filename == ""} {
    set filename "-"
}

# Read the ciphertext from the input file
set ct [CipherUtil::readCiphertext $filename]

set cipher [cipher create homophonic -ct $ct]

# Fit the columns

proc getOffsets {ctext} {
    set cipher [cipher create homophonic -ct $ctext]

    set histogram [$cipher cget -histogram]
    set histVals {}
    foreach {key value} $histogram {
	lappend histVals $value
    }

    set histogram1 [lrange $histVals 0 24]
    set histogram2 [lrange $histVals 25 49]
    set histogram3 [lrange $histVals 50 74]
    set histogram4 [lrange $histVals 75 99]

#    showHist $histogram1
#    showHist $histogram2
#    showHist $histogram3
#    showHist $histogram4

    set histOffset2 [stat histfit $histogram1 $histogram2]
    set histOffset3 [stat histfit $histogram1 $histogram3]
    set histOffset4 [stat histfit $histogram1 $histogram4]

#    puts "1,2: [stat histfit $histogram1 $histogram2]: [stat histvals $histogram1 $histogram2]"
#    puts "1,3: [stat histfit $histogram1 $histogram3]: [stat histvals $histogram1 $histogram3]"
#    puts "1,4: [stat histfit $histogram1 $histogram4]: [stat histvals $histogram1 $histogram4]"
#    puts "2,3: [stat histfit $histogram2 $histogram3]: [stat histvals $histogram2 $histogram3]"
#    puts "2,4: [stat histfit $histogram2 $histogram4]: [stat histvals $histogram2 $histogram4]"
#    puts "3,4: [stat histfit $histogram3 $histogram4]: [stat histvals $histogram3 $histogram4]"

    return [list 0 $histOffset2 $histOffset3 $histOffset4]
}

proc showHist {histogram} {
    foreach el $histogram {
	puts -nonewline [format %3d $el]
    }
    puts ""
}

proc homoToPat {ctext} {
    array set num2char [list 1 a 2 b 3 c 4 d 5 e 6 f 7 g 8 h 9 i 10 k 11 l 12 m 13 n 14 o 15 p 16 q 17 r 18 s 19 t 20 u 21 v 22 w 23 x 24 y 25 z]
    for {set i 1} {$i <= 25} {incr i} {
	regsub -all [format %02d $i] $ctext $num2char($i) ctext
	regsub -all [format %02d [expr {$i+25}]] $ctext $num2char($i) ctext
	regsub -all [format %02d [expr {$i+50}]] $ctext $num2char($i) ctext
	regsub -all [format %02d [expr {($i+75)%100}]] $ctext $num2char($i) ctext
    }

    return $ctext
}

set ctext [$cipher cget -ciphertext]
regsub -all {[0-9][0-9]} $ctext {& } ctext
#puts $ctext

set offsetList [getOffsets [$cipher cget -ciphertext]]
set offset2 [lindex $offsetList 1]
set offset3 [lindex $offsetList 2]
set offset4 [lindex $offsetList 3]
#puts "offsets = $offsetList"

set map {}
for {set i 0} {$i < 25} {incr i} {
    set ctVal [format %02d [expr {$i + 26}]]
    set offsetVal [format %02d [expr {($i - $offset2 + 25)%25 + 26}]]
    #set count [regsub -all $ctVal $ctext $offsetVal ctext]
    lappend map $ctVal $offsetVal

    set ctVal [format %02d [expr {$i + 51}]]
    set offsetVal [format %02d [expr {($i - $offset3 + 25)%25 + 51}]]
    #set count [regsub -all $ctVal $ctext $offsetVal ctext]
    lappend map $ctVal $offsetVal

    set ctVal [format %02d [expr {($i + 76)%100}]]
    set offsetVal [format %02d [expr {(($i - $offset4 + 25)%25 + 76)%100}]]
    #set count [regsub -all $ctVal $ctext $offsetVal ctext]
    lappend map $ctVal $offsetVal
}
#puts "Mapping $map"
set ctext [string map $map $ctext]

#puts $ctext

set offsetList [getOffsets $ctext]

puts [homoToPat $ctext]
