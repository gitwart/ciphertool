#!/bin/sh
# \
exec tclsh "$0" ${1+"$@"}

# genboard --
#
#	Generate a working layout for solving a cipher by hand.
#
# RCS: @(#) $Id: genboard,v 1.15 2008/03/05 03:54:58 wart Exp $
#
# Copyright (C) 2002-2005  Mike Thomas <wart@kobold.org>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

package require cipher
package require CipherUtil

if {[llength $argv] < 2 || [llength $argv] > 3} {
    puts stderr "Usage:  $argv0 file type ?period?"
    exit 1
}

set filename [lindex $argv 0]
set ciphertype [lindex $argv 1]
set period [lindex $argv 2]

set ct [CipherUtil::readCiphertext $filename]

# If this is a known cipher type then create a cipher object
# from the ciphertext.  This will ensure that only the valid cipher
# characters are preserved.  Otherwise we just assume it's a route
# and restrict it to a-z0-9.
if {[lsearch [cipher types] $ciphertype] != -1} {
    set c [cipher create $ciphertype -ct $ct]
    # Gromark ciphers don't have periods, they have primers.
    if {$ciphertype == "gromark"} {
	$c configure -primer $period
    }
    if {$period != ""} {
	$c configure -period $period
    }
} else {
    set c [cipher create route -ct $ct]
}

array set alphabet {
    a 0 b 1 c 2 d 3 e 4 f 5 g 6 h 7 i 8 j 9 k 10 l 11 m 12 n 13 o 14 p 15 q 16
    r 17 s 18 t 19 u 20 v 21 w 22 x 23 y 24 z 25
}
set alphabetString abcdefghijklmnopqrstuvwxyz

set page_width 78

# Now print the board.

puts $filename
puts ""
puts ""

proc show_ciphertext {ctext period} {
    global page_width
    set pattern [string repeat . $period]
    set column 0
    set row 0

    while {[string length $ctext] > 0} {
	if {[regexp $pattern $ctext ctgroup]} {
	    regsub $pattern $ctext {} ctext
	} else {
	    set ctgroup $ctext
	    set ctext ""
	}

	if {$column+[string length $ctgroup] > $page_width} {
	    puts ""
	    puts ""
	    puts ""
	    set column 0
	    incr row 3
	} elseif {$column != 0} {
	    puts -nonewline " "
	    incr column
	}
	puts -nonewline [string toupper $ctgroup]
	incr column [string length $ctgroup]
    }
    if {[string length $ctext] > 0} {
	puts $ctext
	incr row
    }
    puts ""
    incr row

    return $row
}

proc show_ifid {ctext period groupsize} {
    global page_width
    set pattern [string repeat . $period]
    set column 0
    set row 0
    set spacesPerGroup [expr {$groupsize * 2 - 1}]
    set separator /

    for {set i 0} {$i < $groupsize} {incr i} {
	set board($i) {}
    }

    while {[string length $ctext] > 0} {
	if {[regexp $pattern $ctext ctgroup]} {
	    regsub $pattern $ctext {} ctext
	} else {
	    set ctgroup $ctext
	    set ctext ""
	}
	set ctgroupLength [string length $ctgroup]
	set boardGroup [join \
		[split \
			[string repeat \
				{ } \
				[expr {$groupsize*[string length $ctgroup]}]] \
			{}] \
		$separator]
	set boardGroup [string map [list { } [string repeat { } $spacesPerGroup]] $boardGroup]
	set ctgroup [join [split $ctgroup {}] { }]

	if {$column+[string length $ctgroup] > $page_width-5} {
	    puts ""
	    for {set i 0} {$i < $groupsize} {incr i} {
		puts $board($i)
		set board($i) {}
	    }
	    puts ""
	    puts ""
	    set column 0
	    set row [expr {$row + 3 + $groupsize}]
	} elseif {$column != 0} {
	    for {set i 0} {$i < $groupsize} {incr i} {
		append board($i) " "
	    }
	    puts -nonewline "   "
	    incr column
	}

	for {set i 0} {$i < $groupsize} {incr i} {
	    set partial [string range $boardGroup [expr {$i * $ctgroupLength * 2}] [expr {($i + 1) * $ctgroupLength * 2}]]
	    regsub "$separator \$" $partial {  } partial
	    append board($i) $partial
	}
	puts -nonewline [string toupper $ctgroup]
	incr column [string length $ctgroup]
    }

    puts ""
    if {$board(0) != ""} {
	for {set i 0} {$i < $groupsize} {incr i} {
	    puts $board($i)
	    set board($i) {}
	}
    }
}

proc show_columnar {ctext period} {
    set pattern [string repeat . $period]
    set column 0
    set row 0

    while {[string length $ctext] > 0} {
	if {[regexp $pattern $ctext ctgroup]} {
	    regsub $pattern $ctext {} ctext
	} else {
	    set ctgroup $ctext
	    set ctext ""
	}

	puts " [string toupper [join [split $ctgroup {}] { }]]"
	puts ""
    }
}

proc show_row {ctext} {
    global page_width

    if {[string length $ctext] < $page_width} {
	puts $ctext
	return [string length $ctext]
    }

    set spaceIndex [string last " " $ctext $page_width]
    if {$spaceIndex == -1} {
	puts $ctext
    } else {
	puts [string range $ctext 0 [expr {$spaceIndex-1}]]
    }

    return [expr {$spaceIndex - 1}]
}

proc show_phillips_keysquares {} {
    puts ""
    puts "\t1 _ _ _ _ _\t2 _ _ _ _ _\t2 _ _ _ _ _\t2 _ _ _ _ _"
    puts "\t2 _ _ _ _ _\t1 _ _ _ _ _\t3 _ _ _ _ _\t3 _ _ _ _ _"
    puts "\t3 _ _ _ _ _\t3 _ _ _ _ _\t1 _ _ _ _ _\t4 _ _ _ _ _"
    puts "\t4 _ _ _ _ _\t4 _ _ _ _ _\t4 _ _ _ _ _\t1 _ _ _ _ _"
    puts "\t5 _ _ _ _ _\t5 _ _ _ _ _\t5 _ _ _ _ _\t5 _ _ _ _ _"
    puts ""
    puts "\t2 _ _ _ _ _\t3 _ _ _ _ _\t3 _ _ _ _ _\t3 _ _ _ _ _"
    puts "\t3 _       _\t2 _ _ _ _ _\t4 _ _ _ _ _\t4 _       _"
    puts "\t4 _   1   _\t4 _ _ _ _ _\t2 _ _ _ _ _\t5 _   2   _"
    puts "\t5 _       _\t5 _ _ _ _ _\t5 _ _ _ _ _\t2 _       _"
    puts "\t1 _ _ _ _ _\t1 _ _ _ _ _\t1 _ _ _ _ _\t1 _ _ _ _ _"

    return 6
}

proc show_5x5_keysquares {} {
    puts ""
    puts "\t_ _ _ _ _\t_ _ _ _ _\t_ _ _ _ _\t_ _ _ _ _"
    puts "\t_ _ _ _ _\t_ _ _ _ _\t_ _ _ _ _\t_ _ _ _ _"
    puts "\t_ _ _ _ _\t_ _ _ _ _\t_ _ _ _ _\t_ _ _ _ _"
    puts "\t_ _ _ _ _\t_ _ _ _ _\t_ _ _ _ _\t_ _ _ _ _"
    puts "\t_ _ _ _ _\t_ _ _ _ _\t_ _ _ _ _\t_ _ _ _ _"

    return 6
}

proc show_6x6_keysquares {} {
    puts ""
    puts "\t_ _ _ _ _ _\t_ _ _ _ _ _\t_ _ _ _ _ _\t_ _ _ _ _ _"
    puts "\t_ _ _ _ _ _\t_ _ _ _ _ _\t_ _ _ _ _ _\t_ _ _ _ _ _"
    puts "\t_ _ _ _ _ _\t_ _ _ _ _ _\t_ _ _ _ _ _\t_ _ _ _ _ _"
    puts "\t_ _ _ _ _ _\t_ _ _ _ _ _\t_ _ _ _ _ _\t_ _ _ _ _ _"
    puts "\t_ _ _ _ _ _\t_ _ _ _ _ _\t_ _ _ _ _ _\t_ _ _ _ _ _"
    puts "\t_ _ _ _ _ _\t_ _ _ _ _ _\t_ _ _ _ _ _\t_ _ _ _ _ _"

    return 7
}

proc show_digrafid_squares {} {
    for {set i 0} {$i < 2} {incr i} {
	puts ""
	puts ""
	puts "_ _ _ _ _ _ _ _ _   _ _ _	_ _ _ _ _ _ _ _ _   _ _ _	"
	puts "_ _ _ _ _ _ _ _ _   _ _ _	_ _ _ _ _ _ _ _ _   _ _ _	"
	puts "_ _ _ _ _ _ _ _ _   _ _ _	_ _ _ _ _ _ _ _ _   _ _ _	"
	puts ""
	puts "                    _ _ _	                    _ _ _	"
	puts "                    _ _ _	                    _ _ _	"
	puts "                    _ _ _	                    _ _ _	"
	puts "                    _ _ _	                    _ _ _	"
	puts "                    _ _ _	                    _ _ _	"
	puts "                    _ _ _	                    _ _ _	"
	puts "                    _ _ _	                    _ _ _	"
	puts "                    _ _ _	                    _ _ _	"
	puts "                    _ _ _	                    _ _ _	"
    }
}

set cipherTypeList [lsort [list homophonic twosquare phillips playfair \
    bigfoursquare foursquare fmorse trisquare bifid cmbifid bigbifid trifid \
    quagmire1 quagmire2 quagmire3 quagmire4 ragbaby gromark nicodemus \
    checkerboard]]

switch $ciphertype {
    homophonic {
	show_ciphertext [$c cget -ciphertext] 2
	puts ""
	foreach offset {1 26 51 76} {
	    for {set i 0} {$i < 25} {incr i} {
		puts -nonewline "[format %02d [expr {($i + $offset)%100}]] "
	    }
	    puts ""
	    puts [string repeat "__ " 25]
	    puts [string repeat "__ " 25]
	    puts [string repeat "__ " 25]
	    puts [string repeat "__ " 25]
	}
    }
    checkerboard {
        array set map [CipherUtil::checkerboard2pat [$c cget -ciphertext]]
	show_ciphertext $map(ciphertext) 1

        puts ""
        puts ""
        for {set i 0} {$i < [string length $map(pre)]} {incr i} {
            set keysquare($i) {}
            for {set j 0} {$j < [string length $map(post)]} {incr j} {
                append keysquare($i) [string toupper $map([string index $map(pre) $i][string index $map(post) $j])]
            }
        }

        puts [string repeat "      [join [split $map(post) {}] { }]" 4]
        for {set i 0} {$i < [string length $map(pre)]} {incr i} {
            set preLetter [string index $map(pre) $i]
            puts -nonewline "    $preLetter [join [split $keysquare($i) {}] { }]"
            puts -nonewline "[string repeat "    $preLetter _ _ _ _ _" 3]"
            puts ""
        }
    }
    twosquare {
	show_ciphertext [$c cget -ciphertext] 2
	puts ""
	show_5x5_keysquares
	puts ""
	show_5x5_keysquares
    }
    phillips {
	# Print 8 groups per row for the phillips cipher so that the
	# groups for identical blocks line up vertically.
	if {$page_width > 48} {
	    set page_width 48
	}
	show_ciphertext [$c cget -ciphertext] 5
	puts ""
	show_phillips_keysquares
    }
    playfair {
	show_ciphertext [$c cget -ciphertext] 2
	puts ""
	show_5x5_keysquares
	puts ""
	show_5x5_keysquares
    }
    bigplayfair {
	show_ciphertext [$c cget -ciphertext] 2
	puts ""
	show_6x6_keysquares
    }
    bigfoursquare {
	show_ciphertext [$c cget -ciphertext] 2
	puts ""
	puts ""
        puts "   A 1 B 2 C 3\t_ _ _ _ _ _\t\t   A 1 B 2 C 3\t_ _ _ _ _ _"
        puts "   D 4 E 5 F 6\t_ _ _ _ _ _\t\t   D 4 E 5 F 6\t_ _ _ _ _ _"
        puts "   G 7 H 8 I 9\t_ _ _ _ _ _\t\t   G 7 H 8 I 9\t_ _ _ _ _ _"
        puts "   J 0 K L M N\t_ _ _ _ _ _\t\t   J 0 K L M N\t_ _ _ _ _ _"
        puts "   O P Q R S T\t_ _ _ _ _ _\t\t   O P Q R S T\t_ _ _ _ _ _"
        puts "   U V W X Y Z\t_ _ _ _ _ _\t\t   U V W X Y Z\t_ _ _ _ _ _"
        puts ""
        puts "   _ _ _ _ _ _\tA 1 B 2 C 3\t\t   _ _ _ _ _ _\tA 1 B 2 C 3"
        puts "   _ _ _ _ _ _\tD 4 E 5 F 6\t\t   _ _ _ _ _ _\tD 4 E 5 F 6"
        puts "   _ _ _ _ _ _\tG 7 H 8 I 9\t\t   _ _ _ _ _ _\tG 7 H 8 I 9"
        puts "   _ _ _ _ _ _\tJ 0 K L M N\t\t   _ _ _ _ _ _\tJ 0 K L M N"
        puts "   _ _ _ _ _ _\tO P Q R S T\t\t   _ _ _ _ _ _\tO P Q R S T"
        puts "   _ _ _ _ _ _\tU V W X Y Z\t\t   _ _ _ _ _ _\tU V W X Y Z"
    }
    foursquare {
	show_ciphertext [$c cget -ciphertext] 2
	puts ""
	puts ""
	puts "    A B C D E\t_ _ _ _ _\t\t    A B C D E\t_ _ _ _ _"
	puts "    F G H I K\t_ _ _ _ _\t\t    F G H I K\t_ _ _ _ _"
	puts "    L M N O P\t_ _ _ _ _\t\t    L M N O P\t_ _ _ _ _"
	puts "    Q R S T U\t_ _ _ _ _\t\t    Q R S T U\t_ _ _ _ _"
	puts "    V W X Y Z\t_ _ _ _ _\t\t    V W X Y Z\t_ _ _ _ _"
	puts ""
	puts "    _ _ _ _ _\tA B C D E\t\t    _ _ _ _ _\tA B C D E"
	puts "    _ _ _ _ _\tF G H I K\t\t    _ _ _ _ _\tF G H I K"
	puts "    _ _ _ _ _\tL M N O P\t\t    _ _ _ _ _\tL M N O P"
	puts "    _ _ _ _ _\tQ R S T U\t\t    _ _ _ _ _\tQ R S T U"
	puts "    _ _ _ _ _\tV W X Y Z\t\t    _ _ _ _ _\tV W X Y Z"
    }
    fmorse {
	show_ciphertext [join [split [$c cget -ciphertext] ""] " "] 1
	puts ""
	puts ""
	puts ".  .  .  .  .  .  .  .  .  -  -  -  -  -  -  -  -  -  x  x  x  x  x  x  x  x"
	puts ".  .  .  -  -  -  x  x  x  .  .  .  -  -  -  x  x  x  .  .  .  -  -  -  x  x"
	puts ".  -  x  .  -  x  .  -  x  .  -  x  .  -  x  .  -  x  .  -  x  .  -  x  .  -"
	puts ""
	puts "_  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _"
	puts "_  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _"
	puts "_  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _"
	puts "_  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _"
	puts "_  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _"
	puts "_  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _"
	puts "_  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _"
	puts "_  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _"
	puts "_  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _"

	puts ""

	foreach lGroup [list agmsy5 bhntz6 ciou17 djpv28 ekqw39 flrx40] {
	    foreach letter [split $lGroup ""] {
		puts -nonewline "  $letter [format %-6s [morse $letter]]"
	    }
	    puts ""
	}
    }
    trisquare {
	show_ciphertext [$c cget -ciphertext] 3
	puts ""
	puts ""
	puts "\t         \t_ _ _ _ _\t\t         \t_ _ _ _ _"
	puts "\t         \t_ _ _ _ _\t\t         \t_ _ _ _ _"
	puts "\t         \t_ _ _ _ _\t\t         \t_ _ _ _ _"
	puts "\t         \t_ _ _ _ _\t\t         \t_ _ _ _ _"
	puts "\t         \t_ _ _ _ _\t\t         \t_ _ _ _ _"
	puts ""
	puts "\t_ _ _ _ _\t_ _ _ _ _\t\t_ _ _ _ _\t_ _ _ _ _"
	puts "\t_ _ _ _ _\t_ _ _ _ _\t\t_ _ _ _ _\t_ _ _ _ _"
	puts "\t_ _ _ _ _\t_ _ _ _ _\t\t_ _ _ _ _\t_ _ _ _ _"
	puts "\t_ _ _ _ _\t_ _ _ _ _\t\t_ _ _ _ _\t_ _ _ _ _"
	puts "\t_ _ _ _ _\t_ _ _ _ _\t\t_ _ _ _ _\t_ _ _ _ _"
    }
    cmbifid -
    bifid {
	show_ifid [$c cget -ciphertext] $period 2
	puts ""
	show_5x5_keysquares
	# Show an extra row of squares for conjugated matrix bifid ciphers.
	if {$ciphertype == "cmbifid"} {
	    show_5x5_keysquares
	}
    }
    bigbifid {
	show_ifid [$c cget -ciphertext] $period 2
	puts ""
	show_6x6_keysquares
    }
    trifid {
	show_ifid [$c cget -ciphertext] $period 3
	puts ""
	puts ""
	puts ""
	puts ""
	puts ""
	puts "     1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3"
	puts "     1 1 1 2 2 2 3 3 3 1 1 1 2 2 2 3 3 3 1 1 1 2 2 2 3 3 3"
	puts "     1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3"
	puts "     _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _"
	puts "     _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _"
	puts "     _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _"
	puts "     _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _"
	puts "     _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _"
	puts "     _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _"
	puts ""
	puts ""
	puts "     A B C D E F G H I J K L M N O P Q R S T U V W X Y Z #"
	puts "     _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _"
	puts "     _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _"
	puts "     _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _"
    }
    quagmire1 -
    quagmire2 -
    quagmire3 -
    quagmire4 {
	show_columnar [$c cget -ciphertext] $period
	puts ""
	for {set i 0} {$i < 2} {incr i} {
	    if {$i > 0} {
		puts ""
		puts ""
	    }
	    if {![string match $ciphertype "quagmire1"]} {
		puts  "   A  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P  Q  R  S  T  U  V  W  X  Y  Z"
	    }
	    for {set col 1} {$col <= $period} {incr col} {
		puts "[format %-3d $col]_  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _"

	    }
	    if {![string match $ciphertype "quagmire2"]} {
		puts  "   A  B  C  D  E  F  G  H  I  J  K  L  M  N  O  P  Q  R  S  T  U  V  W  X  Y  Z"
	    }
	}

	# Print out an extra set of rows for quag3 and quag4 so we can 
	# reconstruct both mixed ct and pt alphabets.
	if {[string match $ciphertype "quagmire3"] || [string match $ciphertype "quagmire4"]} {
	    puts ""
	    puts ""
	    puts "PT _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _"
	    for {set col 1} {$col <= $period} {incr col} {
		puts "[format %-3d $col]_  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _"

	    }
	}
    }
    ragbaby {
	set ctext [$c cget -ciphertext]
	set offsets [$c cget -keyoffset]
	set column 0
	set row 0
	set offsetrow1 ""
	set offsetrow2 ""

	foreach letter [split $offsets ""] {
	    if {[info exists alphabet($letter)]} {
		set value [format %02d $alphabet($letter)]
	    } else {
		set value "  "
	    }
	    append offsetrow1 [string index $value 0]
	    append offsetrow2 [string index $value 1]
	}

	while {$ctext != ""} {
	    set numChars [show_row [string toupper $ctext]]
	    set ctext [string range $ctext [expr {$numChars + 2}] end]

	    puts [string range $offsetrow1 0 $numChars]
	    puts [string range $offsetrow2 0 $numChars]

	    set offsetrow1 [string range $offsetrow1 [expr {$numChars+2}] end]
	    set offsetrow2 [string range $offsetrow2 [expr {$numChars+2}] end]
	    puts ""
	    puts ""
	}

	puts ""
	puts "\t                    1 1 1 1 1 1 1 1 1 1 2 2 2 2"
	puts "\t0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3"
	puts "\t_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _"
	puts "\t_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _"
	puts "\t_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _"
	puts "\t_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _"
	puts "\t_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _"
	puts "\t_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _"
	puts "\t_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _"
	puts "\t_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _"
	puts "\t_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _"
    }
    gromark {
	set ctext [join [split [$c cget -ct] {}] { }]
	set offsets [join [split [$c cget -offset] {}] { }]
	while {$ctext != ""} {
	    set numChars [show_row [string toupper $ctext]]
	    set numChars [show_row $offsets]
	    set ctext [string range $ctext [expr {$numChars + 2}] end]
	    set offsets [string range $offsets [expr {$numChars + 2}] end]
	    puts ""
	    puts ""
	}

	puts  " a  b  c  d  e  f  g  h  i  j  k  l  m  n  o  p  q  r  s  t  u  v  w  x  y  z"
	for {set i 0} {$i < 8} {incr i} {
	    puts  " _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _  _"
	}
    }
    nicodemus {
	$c configure -encoding vigenere
	show_columnar [$c cget -plaintext] $period
    }
    vigenere -
    variant -
    beaufort -
    porta -
    gronsfeld {
	show_columnar [$c cget -ciphertext] $period
	puts ""
	puts "   [string toupper [join [split $alphabetString {}] " "]]"
	puts ""
	foreach key [split $alphabetString ""] {
	    set line "[string toupper $key] "
	    foreach pt [split $alphabetString ""] {
		switch $ciphertype {
		    vigenere -
		    gronsfeld {
			append line " [key convert vigct $key $pt]"
		    }
		    variant {
			append line " [key convert varct $key $pt]"
		    }
		    beaufort {
			append line " [key convert beact $key $pt]"
		    }
		    porta {
			append line " [key convert prtct $key $pt]"
		    }
		}
	    }
	    puts $line
	}
    }
    default {
	puts "Unrecognized cipher '$ciphertype'"
	puts "Must be one of:"
	foreach type $cipherTypeList {
	    puts "\t$type"
	}

    }
}
