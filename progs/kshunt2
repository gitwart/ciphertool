#!/bin/sh
# \
exec tclsh "$0" ${1+"$@"}

# kshunt --
#
#	Search for a keysquare that fits a certain pattern.
#
# RCS: @(#) $Id: vigenere.tcl,v 1.2 2004/09/08 14:42:09 wart Exp $
#
# Copyright (C) 2000-2008  Mike Thomas <wart@kobold.org>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

package require cipher

# Command line processing

if {[llength $argv] < 0 || [llength $argv] > 1} {
    puts stderr "Usage:  $argv0 ?keyword?"
    exit 1
}

set fixedKeyword [lindex $argv 0]

# Iterate over all possible keys

set key [lindex $argv 0]

set maxValue 0
set maxKeyword {}
set maxKey {}
set maxKeyBlock {}
set count 0
set stepInterval 2000

# Defaults for the various cipher types
set cipherParms(keyperiod) 5
set cipherParms(keylength) 25
set cipherParms(keypattern) {j}
set cipherParms(keysub) {{}}
set cipherParms(bestkeyProc) {bestkey}

set targetKey 	 "??????"
append targetKey "?????a"
append targetKey "??b???"
append targetKey "??????"
append targetKey "k???p?"
append targetKey "??w???"
set cipherParms(targetKey) $targetKey

proc bestkey {cipherProc keywordList countVar {maxValue 0}} {
    global stepInterval cipherParms
    upvar $countVar count

    set maxKeyword {}
    set maxKey {}
    set keycipher [cipher create route \
	    -ct [string repeat a $cipherParms(keylength)] \
	    -period $cipherParms(keyperiod)]

    foreach keyword $keywordList {
	# Change 'j' to 'i', since these letters are doubled in the keysquare.
	# regsub -all {j} $keyword i keyword

	incr count

	if {! [catch {set fixedKey [key generate -k1 ${keyword}]} err] } {
	    # Remove 'j' from the key
	    regsub -all {j} $fixedKey {} fixedKey

	    # Use a 36 character alphabet
#	    set fixedKey [string map \
#		    {a a1 b b2 c c3 d d4 e e5 f f6 g g7 h h8 i i9 j j0} \
#		    $fixedKey]

	    # Use a 27 letter alphabet by adding 0 at the end.
	    #append fixedKey 0

	    $keycipher configure -ct $fixedKey

	    # There are 36 possible routes to try

	    for {set i 1} {$i <= 36} {incr i} {
		$keycipher configure -in $i

		#$cipherProc restore [$keycipher cget -pt]

		#set value [score value [$cipherProc cget -pt]]
		#puts "value for $keyword is $value"

		set result 0
		foreach row [$keycipher cget -ptblock] {
		    if {[string first t $row] != -1 \
			&& [string first u $row] != -1 \
			&& [string first r $row] != -1 \
			&& [string first o $row] != -1} {
			incr result
		    }
		    if {[string first w $row] != -1 \
			&& [string first z $row] != -1} {
			incr result
		    }
		    if {[string first d $row] != -1 \
			&& [string first n $row] != -1 \
			&& [string first c $row] != -1} {
			incr result
		    }
		    if {[string first e $row] != -1 \
			&& [string first b $row] != -1 \
			&& [string first a $row] != -1 \
			&& [string first l $row] != -1 \
			&& [string first i $row] != -1} {
			incr result
		    }
		}
		if {$result == 4} {
		    foreach row [$keycipher cget -ptblock] {
			puts "#\t[string toupper $row]"
		    }
		    puts "# $count, $keyword"
		    puts ""
		}
#		if {[string match $cipherParms(targetKey) \
#			[$keycipher cget -pt]]} {
#		    foreach row [$keycipher cget -ptblock] {
#			puts "#\t[string toupper $row]"
#		    }
#		    puts "# $count, $keyword"
#		    puts ""
#		}
	    }
	} else {
	    #puts "Got error while creating keylist:  $err"
	    # Keyword contained invalid characters
	}
	if {$count%$stepInterval == 0} {
	    puts "# $keyword"
	    puts "# $count: [$keycipher cget -pt]"
	    puts ""
	}
    }

    rename $keycipher {}

    return [list $maxValue $maxKeyword $maxKey]
}

if {$fixedKeyword == ""} {
    foreach wordLength [Dictionary::availableLengths] {
	set keywordList [Dictionary::lookupByLength $wordLength]

	$cipherParms(bestkeyProc) foo $keywordList count $maxValue
    }
} else {
    $cipherParms(bestkeyProc) foo $fixedKeyword count $maxValue
}
