#!/bin/sh
# \
exec tclsh "$0" ${1+"$@"}

# slidesolve --
#
#	Automatic solver for slidefair ciphers.
#
# RCS: @(#) $Id: slidesolve,v 1.7 2008/03/31 19:23:40 wart Exp $
#
# Copyright (C) 2000-2002  Mike Thomas <wart@kobold.org>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

package require cipher
package require CipherUtil
package require cmdline
package require Scoredata
package require Dictionary

# Command line processing

set options [list \
    [list file.arg "-" "The name of the input cipher file"] \
    [list type.arg "vigenere" "The encoding type for the slidefair cipher."] \
    [list period.arg 0 "The period for the cipher."] \
    [list keyword.arg {} "A fixed keyword to use when decrypting."] \
    [list addspace "Locate spaces in the resulting plaintext."] \
    [list scoretype.arg {} "The method to use when scoring plaintext."] \
    [list language.arg {} "The foreign language used in this cipher.  This determines which language-specific scoring table to load."] \
    [list stepinterval.arg {2000} "The interval between progress updates."] \
    [list dictionary.arg {} "The directory containing the presorted dictionary files."] \
]

if {[catch {
    foreach {var val} [::cmdline::getoptions argv $options] {
	set $var $val
    }
} msg]} {
    puts stderr $msg
    exit 1
}

if {$period <= 0} {
    puts stderr "Period for a slidefair cipher must be greater than zero."
    exit 1
}

if {$dictionary != ""} {
    set Dictionary::directory $dictionary
}

if {$scoretype == "" && $language != ""} {
    set scoretype digramlog
}
set elemsize {}
if {[regexp {(^[0-9]+)(gram.*)} $scoretype null elemsize scoretype]} {
    set scoretype n${scoretype}
}
if {$scoretype != ""} {
    if {[lsearch [score types] $scoretype] == -1} {
        set defaultScore $scoretype
    } else {
        set defaultScore [score create $scoretype]

        if {$elemsize != ""} {
            $defaultScore elemsize $elemsize
        }
        Scoredata::loadData $defaultScore $language
    }

    score default $defaultScore
}

if {$scoretype == "" && $language != ""} {
    set scoretype digramlog
}
set elemsize {}
if {[regexp {(^[0-9]+)(gram.*)} $scoretype null elemsize scoretype]} {
    set scoretype n${scoretype}
}
if {$scoretype != ""} {
    if {[lsearch [score types] $scoretype] == -1} {
        set defaultScore $scoretype
    } else {
        set defaultScore [score create $scoretype]

        if {$elemsize != ""} {
            $defaultScore elemsize $elemsize
        }
        Scoredata::loadData $defaultScore $language
    }

    score default $defaultScore
}

set alphabet "a b c d e f g h i j k l m n o p q r s t u v w x y z"

# Read the ciphertext from the input file
set ciphertext [CipherUtil::readCiphertext $file]

# Convert the ciphertext to pairs of letters

regsub -all { } $ciphertext {} ciphertext
regsub -all {..} $ciphertext {& } ciphertext
set ciphertext [string trimright $ciphertext]

set keywordList $keyword
if {$keywordList == ""} {
    set keywordList [Dictionary::lookupByLength $period]
}

proc decodeSlidefair {ciphertext type key period} {
    set pt {}
    set currentColumn 0
    foreach pair $ciphertext {
	set keyLetter [string index $key $currentColumn]
	set ct1 [string index $pair 0]
	set ct2 [string index $pair 1]

	switch $type {
	    vigenere {
		set pt1 [key convert vigpt $keyLetter $ct2]
		set pt2 [key convert vigct $keyLetter $ct1]
	    }
	    variant {
		set pt1 [key convert varpt $keyLetter $ct2]
		set pt2 [key convert varct $keyLetter $ct1]
	    }
	    beaufort {
		set pt1 [key convert beapt $keyLetter $ct2]
		set pt2 [key convert beact $keyLetter $ct1]
	    }
	    default {
		set pt1 " "
		set pt2 " "
	    }
	}

	if {$pt1 == ""} {
	    set pt1 " "
	}
	if {$pt2 == ""} {
	    set pt2 " "
	}
	if {$pt1 == $ct1} {
	    set pt1 [key caesarshift $ct1 -1]
	    set pt2 [key caesarshift $ct2 -1]
	}

	puts "$keyLetter: $ct1$ct2 -> $pt1$pt2"
	append pt $pt1$pt2

	incr currentColumn
	if {$currentColumn >= $period} {
	    set currentColumn 0
	}
    }

    return $pt
}

set maxValue 0
set maxPt {}
set maxKey {}
set count 0
foreach key $keywordList {
    set pt [decodeSlidefair $ciphertext $type $key $period]
    set value [score value $pt]
    #puts "$value ($key): $pt"
    if {$value > $maxValue} {
	set maxValue $value
	set maxKey $key
	set maxPt $pt
	puts "#$count:  $key  Fit:  $value"
	puts "#$pt"
    }
    if {$count%$stepinterval == 0} {
	puts "#$count:  $key"
	puts "#$pt"
    }
    incr count
}

for {set column 0} {$column < $period} {incr column} {
}

if {$addspace} {
    set Dictionary::cache [list length word]
    set readablePt [Dictionary::findWords $maxPt]
}

puts "\n"
puts "type=slidefair"
puts "encoding=$type"
puts "period=$period"
puts "ciphertext=$ciphertext"
puts "plaintext=$maxPt"
if {$addspace} {
    puts "#plaintext=$readablePt"
}
puts "keyword=$maxKey"
puts "key=$maxKey"
puts "#score=$maxValue"
