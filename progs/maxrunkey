#!/bin/sh
# \
exec tclsh "$0" ${1+"$@"}

# maxrunkey --
#
#	Utility for aiding insolving running key ciphers
#
# RCS: @(#) $Id: maxrunkey,v 1.4 2008/03/05 03:54:58 wart Exp $
#
# Copyright (C) 2000  Mike Thomas <wart@kobold.org>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

package require cipher

# Usage:  $argv0 file type ?tip?

if {[llength $argv] < 2 || [llength $argv] > 4} {
    puts stderr "Usage:  $argv0 type trigram ?solSize?"
    exit 1
}

set cipherType [lindex $argv 0]
set trigram [lindex $argv 1]
set solSize [lindex $argv 2]

if {[string length $solSize] == 0} {
    set solSize 10
} else {
    set solSize [expr $solSize * 2]
}

if {[lsearch [cipher types] $cipherType] == -1} {
    puts stderr "Unknown cipher type $cipherType"
    exit 1
}

# Generate vigenere, variant, or beaufort tables

set alphabet [list a b c d e f g h i j k l m n o p q r s t u v w x y z]
set ct [join $alphabet {}]

set cipher [cipher create $cipherType -period 26]

foreach ptLetter $alphabet {
    set pt [string repeat $ptLetter 26]
    $cipher substitute $ct $pt 1
    set keyWord [$cipher cget -keyword]
    for {set i 0} {$i < 26} {incr i} {
	set key($ptLetter,[string index $ct $i]) [string index $keyWord $i]
    }
}

proc bestFit {trigram} {
    global key solSize

    set alphabet [list a b c d e f g h i j k l m n o p q r s t u v w x y z]
    set ct1 [string index $trigram 0]
    set ct2 [string index $trigram 1]
    set ct3 [string index $trigram 2]
    set ct4 [string index $trigram 3]
    set ct5 [string index $trigram 4]
    set ct6 [string index $trigram 5]
    set ct7 [string index $trigram 6]

    for {set i 0} {$i <= $solSize} {incr i} {
	set maxValue($i) 0
	set maxPair($i) {}
    }

    foreach pt1 $alphabet {
	set key1 $key($pt1,$ct1)
    foreach pt2 $alphabet {
	set key2 $key($pt2,$ct2)
    foreach pt3 $alphabet {
	set key3 $key($pt3,$ct3)

	set value [expr {[score value $pt1$pt2$pt3]} *\
		{[score value $key1$key2$key3]}]

	if {$value > $maxValue(0)} {
	    for {set i 0} {$i <= $solSize} {incr i} {
		if {$value > $maxValue($i)} {
		    set newPos $i
		}
	    }
	    for {set i 0} {$i < $newPos} {incr i} {
		set maxValue($i) $maxValue([expr $i+ 1])
		set maxPair($i) $maxPair([expr $i+ 1])
	    }

	    set maxValue($newPos) $value
	    set maxPair($newPos) [list $pt1$pt2$pt3 $key1$key2$key3]

	    #parray maxValue
	    #array maxPair
	    #uts ""
	}
    }
    }
    }

    for {set i 0} {$i <= $solSize} {incr i} {
	lappend result [list $maxValue($i) $maxPair($i)]
    }
    return $result
}

set result [bestFit $trigram]
foreach {solution junk} $result {
    set value [lindex $solution 0]
    set pair [lindex $solution 1]
    puts [lindex $pair 0]\t$value
    puts [lindex $pair 1]
    puts ""
}
puts [string toupper $trigram]
