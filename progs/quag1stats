#!/bin/sh
# \
exec tclsh "$0" ${1+"$@"}

# quag1stats --
#
#	Show statistics from attempts to match the alphabets of the
#	various columns of a quagmire 1 cipher.
#
# RCS: @(#) $Id: vigenere.tcl,v 1.2 2004/09/08 14:42:09 wart Exp $
#
# Copyright (C) 2002  Mike Thomas <wart@kobold.org>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

package require cipher
package require CipherUtil

# Command line processing

if {[llength $argv] != 2 && [llength $argv] != 4} {
    puts stderr "Usage:  $argv0 file period ?col1 col2?"
    exit 1
}

set filename [lindex $argv 0]
set period [lindex $argv 1]
set fixedCol1 [lindex $argv 2]
set fixedCol2 [lindex $argv 3]
if {$period <= 1} {
    puts stderr "Period must be greater than 1"
}

if {$fixedCol1 != {}} {
    incr fixedCol1 -1
}
if {$fixedCol2 != {}} {
    incr fixedCol2 -1
}

# Read the ciphertext from the input file
set ct [CipherUtil::readCiphertext $filename]
regsub -all { } $ct {} ct

# Split the ciphertext up into columns so we can make histograms of
# each column independently.

for {set i 0} {$i < $period} {incr i} {
    set column($i) {}
}

set position 0
foreach letter [string tolower [split $ct {}]] {
    append column([expr {$position % $period}]) $letter
    incr position
}

for {set i 0} {$i < $period} {incr i} {
    set hist($i) [stat hist $column($i)]
}

proc showHist {arrayDesc startVal} {
    array set histogram $arrayDesc

    set letterList [lsort [array names histogram]]

    set letterList [eval list [lrange $letterList $startVal end] [lrange $letterList 0 [expr {$startVal - 1}]]]

    foreach letter $letterList {
	puts -nonewline "[format %3d $histogram($letter)]"
    }
    puts ""
    foreach letter $letterList {
	puts -nonewline "  [string toupper $letter]"
    }
    puts ""
}

proc showMatches {hist1 hist2 col1Name col2Name} {
    array set histogram1 $hist1
    array set histogram2 $hist2

    foreach el [lsort [array names histogram1]] {
	lappend hist1Vals $histogram1($el)
    }
    foreach el [lsort [array names histogram2]] {
	lappend hist2Vals $histogram2($el)
    }
    
    set values [stat histvals $hist1Vals $hist2Vals]

    for {set shift 0} {$shift < 26} {incr shift} {
	puts "Column $col1Name vs. $col2Name offset [format %2d $shift]\tFit: [lindex $values $shift]"
	showHist $hist1 0
	showHist $hist2 $shift
	puts ""
    }
}

# Show the results of trying to fit every column to every other column.

if {$fixedCol1 == {}} {
    for {set fixedColumn 0} {$fixedColumn < $period} {incr fixedColumn} {
	array set tempHist $hist($fixedColumn)
	set fixedHist {}
	foreach el [lsort [array names tempHist]] {
	    lappend fixedHist $tempHist($el)
	}

	for {set col [expr {$fixedColumn + 1}]} {$col < $period} {incr col} {
	    # Print out the results of all 26 possible fits with this column.
	    showMatches $hist($fixedColumn) $hist($col) [format %2d [expr {$fixedColumn+1}]] [format %2d [expr {$col+1}]]
	}
    }
} else {
    showMatches $hist($fixedCol1) $hist($fixedCol2) [format %2d [expr {$fixedCol1+1}]] [format %2d [expr {$fixedCol2+1}]]
}
