#!/bin/sh
# \
exec tclsh "$0" ${1+"$@"}

# quag1topat --
#
#	Convert a Quagmire 1 cipher to a patristocrat by attempting to
#	match the ciphertext letter frequencies of the columns.
#
# RCS: @(#) $Id: vigenere.tcl,v 1.2 2004/09/08 14:42:09 wart Exp $
#
# Copyright (C) 2002-2004  Mike Thomas <wart@kobold.org>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

package require cipher
package require CipherUtil

# Command line processing

if {[llength $argv] != 2} {
    puts stderr "Usage:  $argv0 file period"
    exit 1
}

set filename [lindex $argv 0]
set period [lindex $argv 1]
if {$period <= 1} {
    puts stderr "Period must be greater than 1"
}

# Read the ciphertext from the input file
set ct [CipherUtil::readCiphertext $filename]
regsub -all { } $ct {} ct

# Split the ciphertext up into columns so we can make histograms of
# each column independently.

for {set i 0} {$i < $period} {incr i} {
    set column($i) {}
}

set position 0
foreach letter [string tolower [split $ct {}]] {
    append column([expr {$position % $period}]) $letter
    incr position
}

for {set i 0} {$i < $period} {incr i} {
    set hist($i) [stat hist $column($i)]
}

# Assume column 1 is fixed.  Now match the rest of the columns to column
# 1 independently.

array set tempHist $hist(0)
set fixedHist {}
foreach el [lsort [array names tempHist]] {
    lappend fixedHist $tempHist($el)
}

set newCt [string repeat " " [string length $ct]]

for {set index 0} {$index < [string length $ct]} {incr index $period} {
    set newCt [string replace $ct $index $index [string index $ct $index]]
}

for {set col 1} {$col < $period} {incr col} {
    array set tempHist $hist($col)
    set tempVals {}
    foreach el [lsort [array names tempHist]] {
	lappend tempVals $tempHist($el)
    }

    # The offset indicates how many places the second histrogram must be
    # shifted left to match the first histogram.
    set offset [stat histfit $fixedHist $tempVals]

    for {set index $col} {$index < [string length $ct]} {incr index $period} {
	set ctChar [string index $ct $index]
	set newCtChar [CipherUtil::caesarShift $ctChar -$offset]
	set newCt [string replace $newCt $index $index $newCtChar]
    }
}

# Create a new patristocrat cipher and save it.
set patCipher [cipher create aristocrat -ciphertext $newCt]
CipherUtil::writeCipherToFile $patCipher stdout
