#!/bin/sh
# \
exec tclsh "$0" ${1+"$@"}

# progkeysol --
#
#	Progressive key cipher autosolver
#
# RCS: @(#) $Id: progkeysol,v 1.7 2008/03/05 03:54:59 wart Exp $
#
# Copyright (C) 2000-2004  Mike Thomas <wart@kobold.org>
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

package require cipher
package require CipherUtil

# Command line processing

if {[llength $argv] < 5 || [llength $argv] > 5} {
    puts stderr "Usage:  $argv0 cipherfile ciphertype encoding period progIndex"
    exit 1
}

set filename [lindex $argv 0]
set ciphertype [lindex $argv 1]
set secondEncoding [lindex $argv 2]
set period [lindex $argv 3]
set progIndex [lindex $argv 4]

# Read the ciphertext from the input file
set ciphertext [CipherUtil::readCiphertext $filename]
regsub -all { } $ciphertext {} ciphertext

switch -- $ciphertype {
    vigenere {
	set ptconv vigpt
    }
    variant {
	set ptconv varpt
    }
    beaufort {
	set ptconv beapt
    }
    porta {
	set ptconv prtpt
    }
    default {
	puts stderr "Unsupported type $ciphertype"
	exit 1
    }
}

array set alphIndex {
    0 a 1 b 2 c 3 d 4 e 5 f 6 g 7 h 8 i 9 j 10 k 11 l 12 m 13 n 14 o
    15 p 16 q 17 r 18 s 19 t 20 u 21 v 22 w 23 x 24 y 25 z
}

set ct1 {}
for {set i 0} {$i < [string length $ciphertext]} {incr i} {
    set progKey $alphIndex([expr {(int($i / $period) * $progIndex) % 26}])
    append ct1 [key convert $ptconv $progKey [string index $ciphertext $i]]
}

#puts $ct1

set cipher [cipher create $ciphertype -period $period -ct $ct1]
$cipher solve

puts "type	$ciphertype"
puts "period	$period"
puts "progindex	$progIndex"
puts "progtype	$secondEncoding"
puts "key	[list [$cipher cget -key]]"
puts "plaintext	[$cipher cget -pt]"
puts "ciphertext	[$cipher cget -ct]"
puts "#Score value	[score value [$cipher cget -pt]]"
puts "keyword	[$cipher cget -keyword]"
